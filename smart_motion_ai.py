# Form implementation generated from reading ui file 'smart_motion_gui_template_resized.ui'
#
# Created by: PyQt6 UI code generator 6.3.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import sys

programRoot = os.path.dirname(os.path.abspath(__file__))
os.environ["PATH"] += os.pathsep + f'{programRoot}/utils/Graphviz/bin/'

#Module for graph display
from matplotlib.figure import Figure
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg

#Module for GUI
from PyQt6 import QtCore, QtGui, QtWidgets

from utils import videoThread #Core of program
from utils import TableModel #For display status table on detect mode page
from utils import trainModel #For train model in model training page
from utils import popUpProcessMasterData #Window pop-up for master data processing
from utils.modelTraining import findMaxFrame #Method for FIND. MAX button in model training page
from utils.stderrHandler import StdErrHandler #Custom program error handler


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        QtWidgets.QMainWindow.__init__(self, parent=parent)
        self.setupUi(self)
        self.setupText(self)
        self.setupProgram()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 815)
        MainWindow.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.mainTab = QtWidgets.QWidget()
        self.mainTab.setObjectName("mainTab")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.mainTab)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.mainDisplayLabel = QtWidgets.QLabel(self.mainTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainDisplayLabel.sizePolicy().hasHeightForWidth())
        self.mainDisplayLabel.setSizePolicy(sizePolicy)
        self.mainDisplayLabel.setObjectName("mainDisplayLabel")
        self.verticalLayout.addWidget(self.mainDisplayLabel)
        self.mainDisplay = QtWidgets.QLabel(self.mainTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainDisplay.sizePolicy().hasHeightForWidth())
        self.mainDisplay.setSizePolicy(sizePolicy)
        self.mainDisplay.setMinimumSize(QtCore.QSize(470, 350))
        self.mainDisplay.setMaximumSize(QtCore.QSize(470, 350))
        self.mainDisplay.setStyleSheet("background-color: rgb(145, 145, 145);")
        self.mainDisplay.setText("")
        self.mainDisplay.setObjectName("mainDisplay")
        self.verticalLayout.addWidget(self.mainDisplay)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.leftDisplayLabel = QtWidgets.QLabel(self.mainTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.leftDisplayLabel.sizePolicy().hasHeightForWidth())
        self.leftDisplayLabel.setSizePolicy(sizePolicy)
        self.leftDisplayLabel.setObjectName("leftDisplayLabel")
        self.verticalLayout_2.addWidget(self.leftDisplayLabel)
        self.leftDisplay = QtWidgets.QLabel(self.mainTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.leftDisplay.sizePolicy().hasHeightForWidth())
        self.leftDisplay.setSizePolicy(sizePolicy)
        self.leftDisplay.setMinimumSize(QtCore.QSize(98, 98))
        self.leftDisplay.setMaximumSize(QtCore.QSize(98, 98))
        self.leftDisplay.setStyleSheet("background-color: rgb(145, 145, 145);")
        self.leftDisplay.setText("")
        self.leftDisplay.setObjectName("leftDisplay")
        self.verticalLayout_2.addWidget(self.leftDisplay)
        self.verticalLayout_6.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.rightDisplayLabel = QtWidgets.QLabel(self.mainTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rightDisplayLabel.sizePolicy().hasHeightForWidth())
        self.rightDisplayLabel.setSizePolicy(sizePolicy)
        self.rightDisplayLabel.setObjectName("rightDisplayLabel")
        self.verticalLayout_3.addWidget(self.rightDisplayLabel)
        self.rightDisplay = QtWidgets.QLabel(self.mainTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rightDisplay.sizePolicy().hasHeightForWidth())
        self.rightDisplay.setSizePolicy(sizePolicy)
        self.rightDisplay.setMinimumSize(QtCore.QSize(98, 98))
        self.rightDisplay.setMaximumSize(QtCore.QSize(98, 98))
        self.rightDisplay.setStyleSheet("background-color: rgb(145, 145, 145);")
        self.rightDisplay.setText("")
        self.rightDisplay.setObjectName("rightDisplay")
        self.verticalLayout_3.addWidget(self.rightDisplay)
        self.verticalLayout_6.addLayout(self.verticalLayout_3)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.bothDisplayLabel = QtWidgets.QLabel(self.mainTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bothDisplayLabel.sizePolicy().hasHeightForWidth())
        self.bothDisplayLabel.setSizePolicy(sizePolicy)
        self.bothDisplayLabel.setObjectName("bothDisplayLabel")
        self.verticalLayout_4.addWidget(self.bothDisplayLabel)
        self.bothDisplay = QtWidgets.QLabel(self.mainTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bothDisplay.sizePolicy().hasHeightForWidth())
        self.bothDisplay.setSizePolicy(sizePolicy)
        self.bothDisplay.setMinimumSize(QtCore.QSize(98, 98))
        self.bothDisplay.setMaximumSize(QtCore.QSize(98, 98))
        self.bothDisplay.setStyleSheet("background-color: rgb(145, 145, 145);")
        self.bothDisplay.setText("")
        self.bothDisplay.setObjectName("bothDisplay")
        self.verticalLayout_4.addWidget(self.bothDisplay)
        self.verticalLayout_6.addLayout(self.verticalLayout_4)
        self.horizontalLayout.addLayout(self.verticalLayout_6)
        self.gridLayout_10.addLayout(self.horizontalLayout, 0, 1, 2, 1)
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.videoFeedConfigGroupBox = QtWidgets.QGroupBox(self.mainTab)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.videoFeedConfigGroupBox.setFont(font)
        self.videoFeedConfigGroupBox.setObjectName("videoFeedConfigGroupBox")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.videoFeedConfigGroupBox)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.videoSourceComboBox = QtWidgets.QComboBox(self.videoFeedConfigGroupBox)
        self.videoSourceComboBox.setObjectName("videoSourceComboBox")
        self.gridLayout.addWidget(self.videoSourceComboBox, 1, 0, 1, 1)
        self.videoPathLine = QtWidgets.QLineEdit(self.videoFeedConfigGroupBox)
        self.videoPathLine.setObjectName("videoPathLine")
        self.gridLayout.addWidget(self.videoPathLine, 1, 1, 1, 1)
        self.videoSourceLabel = QtWidgets.QLabel(self.videoFeedConfigGroupBox)
        self.videoSourceLabel.setObjectName("videoSourceLabel")
        self.gridLayout.addWidget(self.videoSourceLabel, 0, 0, 1, 1)
        self.videoPathLabel = QtWidgets.QLabel(self.videoFeedConfigGroupBox)
        self.videoPathLabel.setWordWrap(True)
        self.videoPathLabel.setObjectName("videoPathLabel")
        self.gridLayout.addWidget(self.videoPathLabel, 0, 1, 1, 1)
        self.videoPathButton = QtWidgets.QToolButton(self.videoFeedConfigGroupBox)
        self.videoPathButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.videoPathButton.setObjectName("videoPathButton")
        self.gridLayout.addWidget(self.videoPathButton, 1, 2, 1, 1)
        self.verticalLayout_8.addLayout(self.gridLayout)
        self.verticalLayout_10.addWidget(self.videoFeedConfigGroupBox)
        self.mediaPipeConfigGroupBox = QtWidgets.QGroupBox(self.mainTab)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.mediaPipeConfigGroupBox.setFont(font)
        self.mediaPipeConfigGroupBox.setObjectName("mediaPipeConfigGroupBox")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.mediaPipeConfigGroupBox)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.mpModelComplexLabel = QtWidgets.QLabel(self.mediaPipeConfigGroupBox)
        self.mpModelComplexLabel.setWordWrap(True)
        self.mpModelComplexLabel.setObjectName("mpModelComplexLabel")
        self.gridLayout_2.addWidget(self.mpModelComplexLabel, 0, 0, 1, 1)
        self.mpMinTrackLabel = QtWidgets.QLabel(self.mediaPipeConfigGroupBox)
        self.mpMinTrackLabel.setWordWrap(True)
        self.mpMinTrackLabel.setObjectName("mpMinTrackLabel")
        self.gridLayout_2.addWidget(self.mpMinTrackLabel, 0, 3, 1, 1)
        self.roiMergedSizeLabel = QtWidgets.QLabel(self.mediaPipeConfigGroupBox)
        self.roiMergedSizeLabel.setWordWrap(True)
        self.roiMergedSizeLabel.setObjectName("roiMergedSizeLabel")
        self.gridLayout_2.addWidget(self.roiMergedSizeLabel, 0, 5, 1, 1)
        self.mpMinDetectLabel = QtWidgets.QLabel(self.mediaPipeConfigGroupBox)
        self.mpMinDetectLabel.setWordWrap(True)
        self.mpMinDetectLabel.setObjectName("mpMinDetectLabel")
        self.gridLayout_2.addWidget(self.mpMinDetectLabel, 0, 2, 1, 1)
        self.mpMaxHandLabel = QtWidgets.QLabel(self.mediaPipeConfigGroupBox)
        self.mpMaxHandLabel.setWordWrap(True)
        self.mpMaxHandLabel.setObjectName("mpMaxHandLabel")
        self.gridLayout_2.addWidget(self.mpMaxHandLabel, 0, 1, 1, 1)
        self.roiSizeLabel = QtWidgets.QLabel(self.mediaPipeConfigGroupBox)
        self.roiSizeLabel.setWordWrap(True)
        self.roiSizeLabel.setObjectName("roiSizeLabel")
        self.gridLayout_2.addWidget(self.roiSizeLabel, 0, 4, 1, 1)
        self.mpModelComplexComboBox = QtWidgets.QComboBox(self.mediaPipeConfigGroupBox)
        self.mpModelComplexComboBox.setObjectName("mpModelComplexComboBox")
        self.gridLayout_2.addWidget(self.mpModelComplexComboBox, 1, 0, 1, 1)
        self.mpMaxHandComboBox = QtWidgets.QComboBox(self.mediaPipeConfigGroupBox)
        self.mpMaxHandComboBox.setObjectName("mpMaxHandComboBox")
        self.gridLayout_2.addWidget(self.mpMaxHandComboBox, 1, 1, 1, 1)
        self.mpMinDetectSpinBox = QtWidgets.QDoubleSpinBox(self.mediaPipeConfigGroupBox)
        self.mpMinDetectSpinBox.setMinimum(0.1)
        self.mpMinDetectSpinBox.setMaximum(1.0)
        self.mpMinDetectSpinBox.setSingleStep(0.05)
        self.mpMinDetectSpinBox.setObjectName("mpMinDetectSpinBox")
        self.gridLayout_2.addWidget(self.mpMinDetectSpinBox, 1, 2, 1, 1)
        self.mpMinTrackSpinBox = QtWidgets.QDoubleSpinBox(self.mediaPipeConfigGroupBox)
        self.mpMinTrackSpinBox.setMinimum(0.1)
        self.mpMinTrackSpinBox.setMaximum(1.0)
        self.mpMinTrackSpinBox.setSingleStep(0.05)
        self.mpMinTrackSpinBox.setObjectName("mpMinTrackSpinBox")
        self.gridLayout_2.addWidget(self.mpMinTrackSpinBox, 1, 3, 1, 1)
        self.roiSizeSpinBox = QtWidgets.QSpinBox(self.mediaPipeConfigGroupBox)
        self.roiSizeSpinBox.setMinimum(10)
        self.roiSizeSpinBox.setMaximum(5000)
        self.roiSizeSpinBox.setSingleStep(10)
        self.roiSizeSpinBox.setObjectName("roiSizeSpinBox")
        self.gridLayout_2.addWidget(self.roiSizeSpinBox, 1, 4, 1, 1)
        self.roiMergedSizeSpinBox = QtWidgets.QSpinBox(self.mediaPipeConfigGroupBox)
        self.roiMergedSizeSpinBox.setMinimum(10)
        self.roiMergedSizeSpinBox.setMaximum(5000)
        self.roiMergedSizeSpinBox.setSingleStep(10)
        self.roiMergedSizeSpinBox.setObjectName("roiMergedSizeSpinBox")
        self.gridLayout_2.addWidget(self.roiMergedSizeSpinBox, 1, 5, 1, 1)
        self.verticalLayout_9.addLayout(self.gridLayout_2)
        self.verticalLayout_10.addWidget(self.mediaPipeConfigGroupBox)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.detectModeButton = QtWidgets.QPushButton(self.mainTab)
        self.detectModeButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.detectModeButton.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.detectModeButton.setObjectName("detectModeButton")
        self.horizontalLayout_5.addWidget(self.detectModeButton)
        self.recordModeButton = QtWidgets.QPushButton(self.mainTab)
        self.recordModeButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.recordModeButton.setStyleSheet("background-color: rgb(255, 170, 127);")
        self.recordModeButton.setObjectName("recordModeButton")
        self.horizontalLayout_5.addWidget(self.recordModeButton)
        self.verticalLayout_10.addLayout(self.horizontalLayout_5)
        self.verticalLayout_15.addLayout(self.verticalLayout_10)
        self.stackedWidget = QtWidgets.QStackedWidget(self.mainTab)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.page)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.tfliteConfigGroupBox = QtWidgets.QGroupBox(self.page)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.tfliteConfigGroupBox.setFont(font)
        self.tfliteConfigGroupBox.setObjectName("tfliteConfigGroupBox")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.tfliteConfigGroupBox)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.tfModelPathLine = QtWidgets.QLineEdit(self.tfliteConfigGroupBox)
        self.tfModelPathLine.setObjectName("tfModelPathLine")
        self.gridLayout_3.addWidget(self.tfModelPathLine, 1, 0, 1, 1)
        self.tfLabelPathLabel = QtWidgets.QLabel(self.tfliteConfigGroupBox)
        self.tfLabelPathLabel.setWordWrap(True)
        self.tfLabelPathLabel.setObjectName("tfLabelPathLabel")
        self.gridLayout_3.addWidget(self.tfLabelPathLabel, 0, 2, 1, 1)
        self.tfModelPathLabel = QtWidgets.QLabel(self.tfliteConfigGroupBox)
        self.tfModelPathLabel.setWordWrap(True)
        self.tfModelPathLabel.setObjectName("tfModelPathLabel")
        self.gridLayout_3.addWidget(self.tfModelPathLabel, 0, 0, 1, 1)
        self.tfLabelPathLine = QtWidgets.QLineEdit(self.tfliteConfigGroupBox)
        self.tfLabelPathLine.setObjectName("tfLabelPathLine")
        self.gridLayout_3.addWidget(self.tfLabelPathLine, 1, 2, 1, 1)
        self.tfModelPathButton = QtWidgets.QToolButton(self.tfliteConfigGroupBox)
        self.tfModelPathButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.tfModelPathButton.setObjectName("tfModelPathButton")
        self.gridLayout_3.addWidget(self.tfModelPathButton, 1, 1, 1, 1)
        self.tfLabelPathButton = QtWidgets.QToolButton(self.tfliteConfigGroupBox)
        self.tfLabelPathButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.tfLabelPathButton.setObjectName("tfLabelPathButton")
        self.gridLayout_3.addWidget(self.tfLabelPathButton, 1, 3, 1, 1)
        self.verticalLayout_11.addLayout(self.gridLayout_3)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.tfInputRatioLabel = QtWidgets.QLabel(self.tfliteConfigGroupBox)
        self.tfInputRatioLabel.setWordWrap(True)
        self.tfInputRatioLabel.setObjectName("tfInputRatioLabel")
        self.gridLayout_4.addWidget(self.tfInputRatioLabel, 0, 2, 1, 1)
        self.tfMinConfidenceLabel = QtWidgets.QLabel(self.tfliteConfigGroupBox)
        self.tfMinConfidenceLabel.setWordWrap(True)
        self.tfMinConfidenceLabel.setObjectName("tfMinConfidenceLabel")
        self.gridLayout_4.addWidget(self.tfMinConfidenceLabel, 0, 1, 1, 1)
        self.tfSeqSizeLabel = QtWidgets.QLabel(self.tfliteConfigGroupBox)
        self.tfSeqSizeLabel.setWordWrap(True)
        self.tfSeqSizeLabel.setObjectName("tfSeqSizeLabel")
        self.gridLayout_4.addWidget(self.tfSeqSizeLabel, 0, 0, 1, 1)
        self.tfSeqSizeSpinBox = QtWidgets.QSpinBox(self.tfliteConfigGroupBox)
        self.tfSeqSizeSpinBox.setObjectName("tfSeqSizeSpinBox")
        self.gridLayout_4.addWidget(self.tfSeqSizeSpinBox, 1, 0, 1, 1)
        self.tfMinConfidenceSpinBox = QtWidgets.QDoubleSpinBox(self.tfliteConfigGroupBox)
        self.tfMinConfidenceSpinBox.setObjectName("tfMinConfidenceSpinBox")
        self.gridLayout_4.addWidget(self.tfMinConfidenceSpinBox, 1, 1, 1, 1)
        self.tfInputRatioComboBox = QtWidgets.QComboBox(self.tfliteConfigGroupBox)
        self.tfInputRatioComboBox.setObjectName("tfInputRatioComboBox")
        self.gridLayout_4.addWidget(self.tfInputRatioComboBox, 1, 2, 1, 1)
        self.verticalLayout_11.addLayout(self.gridLayout_4)
        self.verticalLayout_13.addWidget(self.tfliteConfigGroupBox)
        self.masterAndScoreConfigGroupBox = QtWidgets.QGroupBox(self.page)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.masterAndScoreConfigGroupBox.setFont(font)
        self.masterAndScoreConfigGroupBox.setObjectName("masterAndScoreConfigGroupBox")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.masterAndScoreConfigGroupBox)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.saveScoreCheckBox = QtWidgets.QCheckBox(self.masterAndScoreConfigGroupBox)
        self.saveScoreCheckBox.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.saveScoreCheckBox.setObjectName("saveScoreCheckBox")
        self.gridLayout_5.addWidget(self.saveScoreCheckBox, 2, 2, 1, 1)
        self.masterFolderPathLabel = QtWidgets.QLabel(self.masterAndScoreConfigGroupBox)
        self.masterFolderPathLabel.setWordWrap(True)
        self.masterFolderPathLabel.setObjectName("masterFolderPathLabel")
        self.gridLayout_5.addWidget(self.masterFolderPathLabel, 0, 0, 1, 1)
        self.masterFolderPathLine = QtWidgets.QLineEdit(self.masterAndScoreConfigGroupBox)
        self.masterFolderPathLine.setObjectName("masterFolderPathLine")
        self.gridLayout_5.addWidget(self.masterFolderPathLine, 1, 0, 1, 1)
        self.saveScorePathLabel = QtWidgets.QLabel(self.masterAndScoreConfigGroupBox)
        self.saveScorePathLabel.setEnabled(False)
        self.saveScorePathLabel.setWordWrap(True)
        self.saveScorePathLabel.setObjectName("saveScorePathLabel")
        self.gridLayout_5.addWidget(self.saveScorePathLabel, 0, 2, 1, 1)
        self.masterFolderPathButton = QtWidgets.QToolButton(self.masterAndScoreConfigGroupBox)
        self.masterFolderPathButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.masterFolderPathButton.setObjectName("masterFolderPathButton")
        self.gridLayout_5.addWidget(self.masterFolderPathButton, 1, 1, 1, 1)
        self.saveScorePathLine = QtWidgets.QLineEdit(self.masterAndScoreConfigGroupBox)
        self.saveScorePathLine.setEnabled(False)
        self.saveScorePathLine.setObjectName("saveScorePathLine")
        self.gridLayout_5.addWidget(self.saveScorePathLine, 1, 2, 1, 1)
        self.saveScorePathButton = QtWidgets.QToolButton(self.masterAndScoreConfigGroupBox)
        self.saveScorePathButton.setEnabled(False)
        self.saveScorePathButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.saveScorePathButton.setObjectName("saveScorePathButton")
        self.gridLayout_5.addWidget(self.saveScorePathButton, 1, 3, 1, 1)
        self.verticalLayout_12.addLayout(self.gridLayout_5)
        self.verticalLayout_13.addWidget(self.masterAndScoreConfigGroupBox)
        self.runDetectModeButton = QtWidgets.QPushButton(self.page)
        self.runDetectModeButton.setEnabled(False)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.runDetectModeButton.setFont(font)
        self.runDetectModeButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.runDetectModeButton.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.runDetectModeButton.setObjectName("runDetectModeButton")
        self.verticalLayout_13.addWidget(self.runDetectModeButton)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.page_2)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_14.addItem(spacerItem)
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.recordOutputPathLine = QtWidgets.QLineEdit(self.page_2)
        self.recordOutputPathLine.setObjectName("recordOutputPathLine")
        self.gridLayout_6.addWidget(self.recordOutputPathLine, 1, 0, 1, 1)
        self.recordOutputPathLabel = QtWidgets.QLabel(self.page_2)
        self.recordOutputPathLabel.setWordWrap(True)
        self.recordOutputPathLabel.setObjectName("recordOutputPathLabel")
        self.gridLayout_6.addWidget(self.recordOutputPathLabel, 0, 0, 1, 1)
        self.recordOutputPathButton = QtWidgets.QToolButton(self.page_2)
        self.recordOutputPathButton.setObjectName("recordOutputPathButton")
        self.gridLayout_6.addWidget(self.recordOutputPathButton, 1, 1, 1, 1)
        self.verticalLayout_14.addLayout(self.gridLayout_6)
        self.gridLayout_7 = QtWidgets.QGridLayout()
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.recordOutputCSVCheckBox = QtWidgets.QCheckBox(self.page_2)
        self.recordOutputCSVCheckBox.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.recordOutputCSVCheckBox.setChecked(True)
        self.recordOutputCSVCheckBox.setObjectName("recordOutputCSVCheckBox")
        self.gridLayout_7.addWidget(self.recordOutputCSVCheckBox, 0, 0, 1, 1)
        self.recordOutputVideoCheckBox = QtWidgets.QCheckBox(self.page_2)
        self.recordOutputVideoCheckBox.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.recordOutputVideoCheckBox.setChecked(True)
        self.recordOutputVideoCheckBox.setObjectName("recordOutputVideoCheckBox")
        self.gridLayout_7.addWidget(self.recordOutputVideoCheckBox, 1, 0, 1, 1)
        self.recordOutputImageCheckBox = QtWidgets.QCheckBox(self.page_2)
        self.recordOutputImageCheckBox.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.recordOutputImageCheckBox.setChecked(True)
        self.recordOutputImageCheckBox.setObjectName("recordOutputImageCheckBox")
        self.gridLayout_7.addWidget(self.recordOutputImageCheckBox, 0, 1, 1, 1)
        self.recordOutputROIVideoCheckBox = QtWidgets.QCheckBox(self.page_2)
        self.recordOutputROIVideoCheckBox.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.recordOutputROIVideoCheckBox.setChecked(True)
        self.recordOutputROIVideoCheckBox.setObjectName("recordOutputROIVideoCheckBox")
        self.gridLayout_7.addWidget(self.recordOutputROIVideoCheckBox, 1, 1, 1, 1)
        self.verticalLayout_14.addLayout(self.gridLayout_7)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_14.addItem(spacerItem1)
        self.runRecordModeButton = QtWidgets.QPushButton(self.page_2)
        self.runRecordModeButton.setEnabled(False)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.runRecordModeButton.setFont(font)
        self.runRecordModeButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.runRecordModeButton.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.runRecordModeButton.setObjectName("runRecordModeButton")
        self.verticalLayout_14.addWidget(self.runRecordModeButton)
        self.stackedWidget.addWidget(self.page_2)
        self.verticalLayout_15.addWidget(self.stackedWidget)
        self.gridLayout_10.addLayout(self.verticalLayout_15, 0, 3, 4, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem2)
        self.formLayout_2 = QtWidgets.QFormLayout()
        self.formLayout_2.setObjectName("formLayout_2")
        self.fpsLabel = QtWidgets.QLabel(self.mainTab)
        self.fpsLabel.setObjectName("fpsLabel")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.fpsLabel)
        self.fpsDisplay = QtWidgets.QLabel(self.mainTab)
        self.fpsDisplay.setMinimumSize(QtCore.QSize(100, 0))
        self.fpsDisplay.setText("")
        self.fpsDisplay.setObjectName("fpsDisplay")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.fpsDisplay)
        self.horizontalLayout_4.addLayout(self.formLayout_2)
        self.formLayout_3 = QtWidgets.QFormLayout()
        self.formLayout_3.setObjectName("formLayout_3")
        self.videoIndexLabel = QtWidgets.QLabel(self.mainTab)
        self.videoIndexLabel.setObjectName("videoIndexLabel")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.videoIndexLabel)
        self.videoIndexDisplay = QtWidgets.QLabel(self.mainTab)
        self.videoIndexDisplay.setMinimumSize(QtCore.QSize(100, 0))
        self.videoIndexDisplay.setText("")
        self.videoIndexDisplay.setObjectName("videoIndexDisplay")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.videoIndexDisplay)
        self.horizontalLayout_4.addLayout(self.formLayout_3)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.gridLayout_10.addLayout(self.horizontalLayout_4, 2, 1, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.previousVideoButton = QtWidgets.QPushButton(self.mainTab)
        self.previousVideoButton.setEnabled(False)
        self.previousVideoButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.previousVideoButton.setObjectName("previousVideoButton")
        self.horizontalLayout_3.addWidget(self.previousVideoButton)
        self.pauseVideoButton = QtWidgets.QPushButton(self.mainTab)
        self.pauseVideoButton.setEnabled(False)
        self.pauseVideoButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.pauseVideoButton.setObjectName("pauseVideoButton")
        self.horizontalLayout_3.addWidget(self.pauseVideoButton)
        self.nextVideoButton = QtWidgets.QPushButton(self.mainTab)
        self.nextVideoButton.setEnabled(False)
        self.nextVideoButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.nextVideoButton.setObjectName("nextVideoButton")
        self.horizontalLayout_3.addWidget(self.nextVideoButton)
        self.gridLayout_10.addLayout(self.horizontalLayout_3, 3, 1, 1, 1)
        self.stackedWidget_2 = QtWidgets.QStackedWidget(self.mainTab)
        self.stackedWidget_2.setObjectName("stackedWidget_2")
        self.detectModeMainPage = QtWidgets.QWidget()
        self.detectModeMainPage.setObjectName("detectModeMainPage")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.detectModeMainPage)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.processTableView = QtWidgets.QTableView(self.detectModeMainPage)
        self.processTableView.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
        self.processTableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectColumns)
        self.processTableView.setObjectName("processTableView")
        self.horizontalLayout_2.addWidget(self.processTableView)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setFormAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.formLayout.setObjectName("formLayout")
        self.processLabel = QtWidgets.QLabel(self.detectModeMainPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.processLabel.sizePolicy().hasHeightForWidth())
        self.processLabel.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.processLabel.setFont(font)
        self.processLabel.setObjectName("processLabel")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.processLabel)
        self.processDisplay = QtWidgets.QLabel(self.detectModeMainPage)
        self.processDisplay.setMinimumSize(QtCore.QSize(0, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.processDisplay.setFont(font)
        self.processDisplay.setText("")
        self.processDisplay.setWordWrap(True)
        self.processDisplay.setObjectName("processDisplay")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.processDisplay)
        self.scoreLabel = QtWidgets.QLabel(self.detectModeMainPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scoreLabel.sizePolicy().hasHeightForWidth())
        self.scoreLabel.setSizePolicy(sizePolicy)
        self.scoreLabel.setObjectName("scoreLabel")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.scoreLabel)
        self.scoreDisplay = QtWidgets.QLineEdit(self.detectModeMainPage)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.scoreDisplay.setFont(font)
        self.scoreDisplay.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.scoreDisplay.setObjectName("scoreDisplay")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.scoreDisplay)
        self.timeLabel = QtWidgets.QLabel(self.detectModeMainPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timeLabel.sizePolicy().hasHeightForWidth())
        self.timeLabel.setSizePolicy(sizePolicy)
        self.timeLabel.setObjectName("timeLabel")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.timeLabel)
        self.timeLCD = QtWidgets.QLCDNumber(self.detectModeMainPage)
        self.timeLCD.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.timeLCD.setFont(font)
        self.timeLCD.setProperty("value", 0.0)
        self.timeLCD.setObjectName("timeLCD")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.timeLCD)
        self.totalTimeLabel = QtWidgets.QLabel(self.detectModeMainPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.totalTimeLabel.sizePolicy().hasHeightForWidth())
        self.totalTimeLabel.setSizePolicy(sizePolicy)
        self.totalTimeLabel.setObjectName("totalTimeLabel")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.ItemRole.LabelRole, self.totalTimeLabel)
        self.totalTimeLCD = QtWidgets.QLCDNumber(self.detectModeMainPage)
        self.totalTimeLCD.setMinimumSize(QtCore.QSize(0, 30))
        self.totalTimeLCD.setObjectName("totalTimeLCD")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.ItemRole.FieldRole, self.totalTimeLCD)
        self.verticalLayout_7.addLayout(self.formLayout)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_7.addItem(spacerItem4)

        #region 'Custom graph display'
        self.figure = Figure()
        self.graphDisplay = FigureCanvasQTAgg(self.figure)
        self.graphDisplay.axes1 = self.graphDisplay.figure.add_subplot(111)
        self.graphDisplay.axes1.xaxis.set_visible(False)
        self.graphDisplay.axes1.yaxis.set_visible(False)
        self.graphDisplay.axes2 = self.graphDisplay.axes1.twiny()
        self.graphDisplay.axes2.xaxis.set_visible(False)
        self.graphDisplay.axes2.yaxis.set_visible(False)
        self.graphDisplay.setMinimumSize(QtCore.QSize(250, 100))
        self.graphDisplay.setMaximumSize(QtCore.QSize(250, 300))
        self.graphDisplay.setObjectName("graphDisplay")
        self.verticalLayout_7.addWidget(self.graphDisplay) 
        #endregion

        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_7.addItem(spacerItem5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_7)
        self.horizontalLayout_2.setStretch(0, 1)
        self.verticalLayout_16.addLayout(self.horizontalLayout_2)
        self.stackedWidget_2.addWidget(self.detectModeMainPage)
        self.recordModeMainPage = QtWidgets.QWidget()
        self.recordModeMainPage.setObjectName("recordModeMainPage")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.recordModeMainPage)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_17.addItem(spacerItem6)
        self.recordStatusDisplay = QtWidgets.QLabel(self.recordModeMainPage)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.recordStatusDisplay.setFont(font)
        self.recordStatusDisplay.setText("")
        self.recordStatusDisplay.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.recordStatusDisplay.setWordWrap(True)
        self.recordStatusDisplay.setObjectName("recordStatusDisplay")
        self.verticalLayout_17.addWidget(self.recordStatusDisplay)
        self.gridLayout_9 = QtWidgets.QGridLayout()
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.action1Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action1Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action1Text.setObjectName("action1Text")
        self.gridLayout_9.addWidget(self.action1Text, 1, 1, 1, 1)
        self.actionIdleButton = QtWidgets.QPushButton(self.recordModeMainPage)
        self.actionIdleButton.setEnabled(False)
        self.actionIdleButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.actionIdleButton.setObjectName("actionIdleButton")
        self.gridLayout_9.addWidget(self.actionIdleButton, 2, 0, 1, 1)
        self.action2Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action2Label.setObjectName("action2Label")
        self.gridLayout_9.addWidget(self.action2Label, 0, 2, 1, 1)
        self.actionIdleText = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.actionIdleText.sizePolicy().hasHeightForWidth())
        self.actionIdleText.setSizePolicy(sizePolicy)
        self.actionIdleText.setMaximumSize(QtCore.QSize(16777215, 100))
        self.actionIdleText.setReadOnly(True)
        self.actionIdleText.setObjectName("actionIdleText")
        self.gridLayout_9.addWidget(self.actionIdleText, 1, 0, 1, 1)
        self.action2Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action2Button.setEnabled(False)
        self.action2Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action2Button.setObjectName("action2Button")
        self.gridLayout_9.addWidget(self.action2Button, 2, 2, 1, 1)
        self.action1Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action1Label.setObjectName("action1Label")
        self.gridLayout_9.addWidget(self.action1Label, 0, 1, 1, 1)
        self.action1Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action1Button.setEnabled(False)
        self.action1Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action1Button.setObjectName("action1Button")
        self.gridLayout_9.addWidget(self.action1Button, 2, 1, 1, 1)
        self.action4Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action4Label.setObjectName("action4Label")
        self.gridLayout_9.addWidget(self.action4Label, 0, 4, 1, 1)
        self.action3Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action3Button.setEnabled(False)
        self.action3Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action3Button.setObjectName("action3Button")
        self.gridLayout_9.addWidget(self.action3Button, 2, 3, 1, 1)
        self.action4Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action4Button.setEnabled(False)
        self.action4Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action4Button.setObjectName("action4Button")
        self.gridLayout_9.addWidget(self.action4Button, 2, 4, 1, 1)
        self.action3Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action3Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action3Text.setObjectName("action3Text")
        self.gridLayout_9.addWidget(self.action3Text, 1, 3, 1, 1)
        self.action3Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action3Label.setObjectName("action3Label")
        self.gridLayout_9.addWidget(self.action3Label, 0, 3, 1, 1)
        self.action6Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action6Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action6Text.setObjectName("action6Text")
        self.gridLayout_9.addWidget(self.action6Text, 1, 6, 1, 1)
        self.action5Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action5Label.setObjectName("action5Label")
        self.gridLayout_9.addWidget(self.action5Label, 0, 5, 1, 1)
        self.action6Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action6Label.setObjectName("action6Label")
        self.gridLayout_9.addWidget(self.action6Label, 0, 6, 1, 1)
        self.action4Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action4Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action4Text.setObjectName("action4Text")
        self.gridLayout_9.addWidget(self.action4Text, 1, 4, 1, 1)
        self.action5Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action5Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action5Text.setObjectName("action5Text")
        self.gridLayout_9.addWidget(self.action5Text, 1, 5, 1, 1)
        self.action7Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action7Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action7Text.setObjectName("action7Text")
        self.gridLayout_9.addWidget(self.action7Text, 1, 7, 1, 1)
        self.action5Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action5Button.setEnabled(False)
        self.action5Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action5Button.setObjectName("action5Button")
        self.gridLayout_9.addWidget(self.action5Button, 2, 5, 1, 1)
        self.action7Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action7Label.setObjectName("action7Label")
        self.gridLayout_9.addWidget(self.action7Label, 0, 7, 1, 1)
        self.action8Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action8Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action8Text.setObjectName("action8Text")
        self.gridLayout_9.addWidget(self.action8Text, 1, 8, 1, 1)
        self.action6Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action6Button.setEnabled(False)
        self.action6Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action6Button.setObjectName("action6Button")
        self.gridLayout_9.addWidget(self.action6Button, 2, 6, 1, 1)
        self.action8Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action8Label.setObjectName("action8Label")
        self.gridLayout_9.addWidget(self.action8Label, 0, 8, 1, 1)
        self.action7Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action7Button.setEnabled(False)
        self.action7Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action7Button.setObjectName("action7Button")
        self.gridLayout_9.addWidget(self.action7Button, 2, 7, 1, 1)
        self.action8Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action8Button.setEnabled(False)
        self.action8Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action8Button.setObjectName("action8Button")
        self.gridLayout_9.addWidget(self.action8Button, 2, 8, 1, 1)
        self.action9Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action9Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action9Text.setObjectName("action9Text")
        self.gridLayout_9.addWidget(self.action9Text, 1, 9, 1, 1)
        self.action9Button = QtWidgets.QPushButton(self.recordModeMainPage)
        self.action9Button.setEnabled(False)
        self.action9Button.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.action9Button.setObjectName("action9Button")
        self.gridLayout_9.addWidget(self.action9Button, 2, 9, 1, 1)
        self.action9Label = QtWidgets.QLabel(self.recordModeMainPage)
        self.action9Label.setObjectName("action9Label")
        self.gridLayout_9.addWidget(self.action9Label, 0, 9, 1, 1)
        self.actionIdleLabel = QtWidgets.QLabel(self.recordModeMainPage)
        self.actionIdleLabel.setObjectName("actionIdleLabel")
        self.gridLayout_9.addWidget(self.actionIdleLabel, 0, 0, 1, 1)
        self.action2Text = QtWidgets.QPlainTextEdit(self.recordModeMainPage)
        self.action2Text.setMaximumSize(QtCore.QSize(16777215, 100))
        self.action2Text.setObjectName("action2Text")
        self.gridLayout_9.addWidget(self.action2Text, 1, 2, 1, 1)
        self.verticalLayout_17.addLayout(self.gridLayout_9)
        spacerItem7 = QtWidgets.QSpacerItem(20, 13, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_17.addItem(spacerItem7)
        self.verticalLayout_17.setStretch(0, 1)
        self.verticalLayout_17.setStretch(3, 1)
        self.verticalLayout_18.addLayout(self.verticalLayout_17)
        self.stackedWidget_2.addWidget(self.recordModeMainPage)
        self.gridLayout_10.addWidget(self.stackedWidget_2, 4, 0, 1, 4)
        spacerItem8 = QtWidgets.QSpacerItem(42, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_10.addItem(spacerItem8, 0, 2, 4, 1)
        spacerItem9 = QtWidgets.QSpacerItem(42, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_10.addItem(spacerItem9, 0, 0, 4, 1)
        self.tabWidget.addTab(self.mainTab, "")
        self.modelTrainTab = QtWidgets.QWidget()
        self.modelTrainTab.setObjectName("modelTrainTab")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.modelTrainTab)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.modelShowFrame = QtWidgets.QFrame(self.modelTrainTab)
        self.modelShowFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.modelShowFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.modelShowFrame.setObjectName("modelShowFrame")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.modelShowFrame)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.tfStructureLabel = QtWidgets.QLabel(self.modelShowFrame)
        self.tfStructureLabel.setObjectName("tfStructureLabel")
        self.verticalLayout_27.addWidget(self.tfStructureLabel)
        self.tfModelStructureScrollArea = QtWidgets.QScrollArea(self.modelShowFrame)
        self.tfModelStructureScrollArea.setWidgetResizable(True)
        self.tfModelStructureScrollArea.setObjectName("tfModelStructureScrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 550, 900))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.tfModelStructureDisplay = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.tfModelStructureDisplay.setMinimumSize(QtCore.QSize(550, 900))
        self.tfModelStructureDisplay.setMaximumSize(QtCore.QSize(550, 900))
        self.tfModelStructureDisplay.setStyleSheet("background-color: rgb(145, 145, 145);")
        self.tfModelStructureDisplay.setText("")
        self.tfModelStructureDisplay.setObjectName("tfModelStructureDisplay")
        self.horizontalLayout_15.addWidget(self.tfModelStructureDisplay)
        self.tfModelStructureScrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_27.addWidget(self.tfModelStructureScrollArea)
        self.horizontalLayout_20.addWidget(self.modelShowFrame)
        self.modelTrainConfigFrame = QtWidgets.QFrame(self.modelTrainTab)
        self.modelTrainConfigFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.modelTrainConfigFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.modelTrainConfigFrame.setObjectName("modelTrainConfigFrame")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.modelTrainConfigFrame)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.verticalLayout_49 = QtWidgets.QVBoxLayout()
        self.verticalLayout_49.setObjectName("verticalLayout_49")
        self.trainModelPathFrame = QtWidgets.QFrame(self.modelTrainConfigFrame)
        self.trainModelPathFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.trainModelPathFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.trainModelPathFrame.setObjectName("trainModelPathFrame")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.trainModelPathFrame)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.datasetFolderPathLabel = QtWidgets.QLabel(self.trainModelPathFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.datasetFolderPathLabel.sizePolicy().hasHeightForWidth())
        self.datasetFolderPathLabel.setSizePolicy(sizePolicy)
        self.datasetFolderPathLabel.setWordWrap(True)
        self.datasetFolderPathLabel.setObjectName("datasetFolderPathLabel")
        self.gridLayout_11.addWidget(self.datasetFolderPathLabel, 0, 0, 1, 1)
        self.datasetFolderPathLine = QtWidgets.QLineEdit(self.trainModelPathFrame)
        self.datasetFolderPathLine.setObjectName("datasetFolderPathLine")
        self.gridLayout_11.addWidget(self.datasetFolderPathLine, 1, 0, 1, 1)
        self.datasetFolderPathButton = QtWidgets.QToolButton(self.trainModelPathFrame)
        self.datasetFolderPathButton.setObjectName("datasetFolderPathButton")
        self.gridLayout_11.addWidget(self.datasetFolderPathButton, 1, 1, 1, 1)
        self.modelTrainOutputPathLine = QtWidgets.QLineEdit(self.trainModelPathFrame)
        self.modelTrainOutputPathLine.setObjectName("modelTrainOutputPathLine")
        self.gridLayout_11.addWidget(self.modelTrainOutputPathLine, 1, 2, 1, 1)
        self.modelTrainOutputPathLabel = QtWidgets.QLabel(self.trainModelPathFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelTrainOutputPathLabel.sizePolicy().hasHeightForWidth())
        self.modelTrainOutputPathLabel.setSizePolicy(sizePolicy)
        self.modelTrainOutputPathLabel.setWordWrap(True)
        self.modelTrainOutputPathLabel.setObjectName("modelTrainOutputPathLabel")
        self.gridLayout_11.addWidget(self.modelTrainOutputPathLabel, 0, 2, 1, 1)
        self.modelTrainOutputPathButton = QtWidgets.QToolButton(self.trainModelPathFrame)
        self.modelTrainOutputPathButton.setObjectName("modelTrainOutputPathButton")
        self.gridLayout_11.addWidget(self.modelTrainOutputPathButton, 1, 3, 1, 1)
        self.verticalLayout_49.addWidget(self.trainModelPathFrame)
        self.modelConfigFrame = QtWidgets.QFrame(self.modelTrainConfigFrame)
        self.modelConfigFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.modelConfigFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.modelConfigFrame.setObjectName("modelConfigFrame")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.modelConfigFrame)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.verticalLayout_42 = QtWidgets.QVBoxLayout()
        self.verticalLayout_42.setObjectName("verticalLayout_42")
        self.frameWidthLabel = QtWidgets.QLabel(self.modelConfigFrame)
        self.frameWidthLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameWidthLabel.sizePolicy().hasHeightForWidth())
        self.frameWidthLabel.setSizePolicy(sizePolicy)
        self.frameWidthLabel.setWordWrap(True)
        self.frameWidthLabel.setObjectName("frameWidthLabel")
        self.verticalLayout_42.addWidget(self.frameWidthLabel)
        self.frameWidthSpinBox = QtWidgets.QSpinBox(self.modelConfigFrame)
        self.frameWidthSpinBox.setEnabled(True)
        self.frameWidthSpinBox.setMinimum(1)
        self.frameWidthSpinBox.setMaximum(5000)
        self.frameWidthSpinBox.setObjectName("frameWidthSpinBox")
        self.verticalLayout_42.addWidget(self.frameWidthSpinBox)
        self.horizontalLayout_16.addLayout(self.verticalLayout_42)
        self.verticalLayout_43 = QtWidgets.QVBoxLayout()
        self.verticalLayout_43.setObjectName("verticalLayout_43")
        self.frameHeightLabel = QtWidgets.QLabel(self.modelConfigFrame)
        self.frameHeightLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameHeightLabel.sizePolicy().hasHeightForWidth())
        self.frameHeightLabel.setSizePolicy(sizePolicy)
        self.frameHeightLabel.setWordWrap(True)
        self.frameHeightLabel.setObjectName("frameHeightLabel")
        self.verticalLayout_43.addWidget(self.frameHeightLabel)
        self.frameHeightSpinBox = QtWidgets.QSpinBox(self.modelConfigFrame)
        self.frameHeightSpinBox.setEnabled(True)
        self.frameHeightSpinBox.setMinimum(1)
        self.frameHeightSpinBox.setMaximum(5000)
        self.frameHeightSpinBox.setObjectName("frameHeightSpinBox")
        self.verticalLayout_43.addWidget(self.frameHeightSpinBox)
        self.horizontalLayout_16.addLayout(self.verticalLayout_43)
        self.gridLayout_12 = QtWidgets.QGridLayout()
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.maxFrameLabel = QtWidgets.QLabel(self.modelConfigFrame)
        self.maxFrameLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maxFrameLabel.sizePolicy().hasHeightForWidth())
        self.maxFrameLabel.setSizePolicy(sizePolicy)
        self.maxFrameLabel.setWordWrap(True)
        self.maxFrameLabel.setObjectName("maxFrameLabel")
        self.gridLayout_12.addWidget(self.maxFrameLabel, 0, 0, 1, 1)
        self.maxFrameSpinBox = QtWidgets.QSpinBox(self.modelConfigFrame)
        self.maxFrameSpinBox.setEnabled(True)
        self.maxFrameSpinBox.setMinimum(1)
        self.maxFrameSpinBox.setMaximum(999999999)
        self.maxFrameSpinBox.setSingleStep(500)
        self.maxFrameSpinBox.setObjectName("maxFrameSpinBox")
        self.gridLayout_12.addWidget(self.maxFrameSpinBox, 1, 0, 1, 1)
        self.findMaxFrameButton = QtWidgets.QPushButton(self.modelConfigFrame)
        self.findMaxFrameButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.findMaxFrameButton.sizePolicy().hasHeightForWidth())
        self.findMaxFrameButton.setSizePolicy(sizePolicy)
        self.findMaxFrameButton.setObjectName("findMaxFrameButton")
        self.gridLayout_12.addWidget(self.findMaxFrameButton, 1, 1, 1, 1)
        self.horizontalLayout_16.addLayout(self.gridLayout_12)
        self.verticalLayout_44 = QtWidgets.QVBoxLayout()
        self.verticalLayout_44.setObjectName("verticalLayout_44")
        self.validateSizeLabel = QtWidgets.QLabel(self.modelConfigFrame)
        self.validateSizeLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.validateSizeLabel.sizePolicy().hasHeightForWidth())
        self.validateSizeLabel.setSizePolicy(sizePolicy)
        self.validateSizeLabel.setWordWrap(True)
        self.validateSizeLabel.setObjectName("validateSizeLabel")
        self.verticalLayout_44.addWidget(self.validateSizeLabel)
        self.validateSizeSpinBox = QtWidgets.QDoubleSpinBox(self.modelConfigFrame)
        self.validateSizeSpinBox.setEnabled(True)
        self.validateSizeSpinBox.setMinimum(0.1)
        self.validateSizeSpinBox.setMaximum(1.0)
        self.validateSizeSpinBox.setSingleStep(0.1)
        self.validateSizeSpinBox.setObjectName("validateSizeSpinBox")
        self.verticalLayout_44.addWidget(self.validateSizeSpinBox)
        self.horizontalLayout_16.addLayout(self.verticalLayout_44)
        self.verticalLayout_45 = QtWidgets.QVBoxLayout()
        self.verticalLayout_45.setObjectName("verticalLayout_45")
        self.testSizeLabel = QtWidgets.QLabel(self.modelConfigFrame)
        self.testSizeLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.testSizeLabel.sizePolicy().hasHeightForWidth())
        self.testSizeLabel.setSizePolicy(sizePolicy)
        self.testSizeLabel.setWordWrap(True)
        self.testSizeLabel.setObjectName("testSizeLabel")
        self.verticalLayout_45.addWidget(self.testSizeLabel)
        self.testSizeSpinBox = QtWidgets.QDoubleSpinBox(self.modelConfigFrame)
        self.testSizeSpinBox.setEnabled(True)
        self.testSizeSpinBox.setMinimum(0.1)
        self.testSizeSpinBox.setMaximum(1.0)
        self.testSizeSpinBox.setSingleStep(0.1)
        self.testSizeSpinBox.setObjectName("testSizeSpinBox")
        self.verticalLayout_45.addWidget(self.testSizeSpinBox)
        self.horizontalLayout_16.addLayout(self.verticalLayout_45)
        self.verticalLayout_46 = QtWidgets.QVBoxLayout()
        self.verticalLayout_46.setObjectName("verticalLayout_46")
        self.batchSizeLabel = QtWidgets.QLabel(self.modelConfigFrame)
        self.batchSizeLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.batchSizeLabel.sizePolicy().hasHeightForWidth())
        self.batchSizeLabel.setSizePolicy(sizePolicy)
        self.batchSizeLabel.setWordWrap(True)
        self.batchSizeLabel.setObjectName("batchSizeLabel")
        self.verticalLayout_46.addWidget(self.batchSizeLabel)
        self.batchSizeSpinBox = QtWidgets.QSpinBox(self.modelConfigFrame)
        self.batchSizeSpinBox.setEnabled(True)
        self.batchSizeSpinBox.setMinimum(1)
        self.batchSizeSpinBox.setMaximum(5000)
        self.batchSizeSpinBox.setObjectName("batchSizeSpinBox")
        self.verticalLayout_46.addWidget(self.batchSizeSpinBox)
        self.horizontalLayout_16.addLayout(self.verticalLayout_46)
        self.verticalLayout_47 = QtWidgets.QVBoxLayout()
        self.verticalLayout_47.setObjectName("verticalLayout_47")
        self.epochLabel = QtWidgets.QLabel(self.modelConfigFrame)
        self.epochLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.epochLabel.sizePolicy().hasHeightForWidth())
        self.epochLabel.setSizePolicy(sizePolicy)
        self.epochLabel.setObjectName("epochLabel")
        self.verticalLayout_47.addWidget(self.epochLabel)
        self.epochSpinBox = QtWidgets.QSpinBox(self.modelConfigFrame)
        self.epochSpinBox.setEnabled(True)
        self.epochSpinBox.setMinimum(1)
        self.epochSpinBox.setMaximum(50000)
        self.epochSpinBox.setSingleStep(50)
        self.epochSpinBox.setObjectName("epochSpinBox")
        self.verticalLayout_47.addWidget(self.epochSpinBox)
        self.horizontalLayout_16.addLayout(self.verticalLayout_47)
        self.verticalLayout_49.addWidget(self.modelConfigFrame)
        self.formLayout_4 = QtWidgets.QFormLayout()
        self.formLayout_4.setObjectName("formLayout_4")
        self.tfModelPresetLabel = QtWidgets.QLabel(self.modelTrainConfigFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tfModelPresetLabel.sizePolicy().hasHeightForWidth())
        self.tfModelPresetLabel.setSizePolicy(sizePolicy)
        self.tfModelPresetLabel.setObjectName("tfModelPresetLabel")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.tfModelPresetLabel)
        self.tfModelPresetComboBox = QtWidgets.QComboBox(self.modelTrainConfigFrame)
        self.tfModelPresetComboBox.setObjectName("tfModelPresetComboBox")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.tfModelPresetComboBox)
        self.verticalLayout_49.addLayout(self.formLayout_4)
        self.verticalLayout_48 = QtWidgets.QVBoxLayout()
        self.verticalLayout_48.setObjectName("verticalLayout_48")
        self.tfModelLayerLabel = QtWidgets.QLabel(self.modelTrainConfigFrame)
        self.tfModelLayerLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tfModelLayerLabel.sizePolicy().hasHeightForWidth())
        self.tfModelLayerLabel.setSizePolicy(sizePolicy)
        self.tfModelLayerLabel.setObjectName("tfModelLayerLabel")
        self.verticalLayout_48.addWidget(self.tfModelLayerLabel)
        self.tfModelLayerText = QtWidgets.QPlainTextEdit(self.modelTrainConfigFrame)
        self.tfModelLayerText.setEnabled(True)
        self.tfModelLayerText.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.tfModelLayerText.setLineWrapMode(QtWidgets.QPlainTextEdit.LineWrapMode.NoWrap)
        self.tfModelLayerText.setObjectName("tfModelLayerText")
        self.verticalLayout_48.addWidget(self.tfModelLayerText)
        self.verticalLayout_49.addLayout(self.verticalLayout_48)
        self.label_47 = QtWidgets.QLabel(self.modelTrainConfigFrame)
        self.label_47.setWordWrap(True)
        self.label_47.setObjectName("label_47")
        self.verticalLayout_49.addWidget(self.label_47)
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_17.addItem(spacerItem10)
        self.trainModelButton = QtWidgets.QPushButton(self.modelTrainConfigFrame)
        self.trainModelButton.setEnabled(False)
        self.trainModelButton.setMinimumSize(QtCore.QSize(250, 35))
        self.trainModelButton.setMaximumSize(QtCore.QSize(250, 35))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.trainModelButton.setFont(font)
        self.trainModelButton.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.trainModelButton.setObjectName("trainModelButton")
        self.horizontalLayout_17.addWidget(self.trainModelButton)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_17.addItem(spacerItem11)
        self.verticalLayout_49.addLayout(self.horizontalLayout_17)
        self.verticalLayout_19.addLayout(self.verticalLayout_49)
        self.horizontalLayout_20.addWidget(self.modelTrainConfigFrame)
        self.horizontalLayout_20.setStretch(0, 3)
        self.horizontalLayout_20.setStretch(1, 2)
        self.verticalLayout_20.addLayout(self.horizontalLayout_20)
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.consoleOutputDisplay = QtWidgets.QTextEdit(self.modelTrainTab)
        self.consoleOutputDisplay.setMinimumSize(QtCore.QSize(500, 300))
        self.consoleOutputDisplay.setObjectName("consoleOutputDisplay")
        self.horizontalLayout_18.addWidget(self.consoleOutputDisplay)
        self.resultFrame = QtWidgets.QFrame(self.modelTrainTab)
        self.resultFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.resultFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.resultFrame.setObjectName("resultFrame")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.resultFrame)
        self.gridLayout_13.setObjectName("gridLayout_13")
        spacerItem12 = QtWidgets.QSpacerItem(20, 78, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_13.addItem(spacerItem12, 0, 0, 1, 1)
        spacerItem13 = QtWidgets.QSpacerItem(20, 78, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_13.addItem(spacerItem13, 0, 1, 1, 1)
        self.verticalLayout_51 = QtWidgets.QVBoxLayout()
        self.verticalLayout_51.setObjectName("verticalLayout_51")
        self.formLayout_5 = QtWidgets.QFormLayout()
        self.formLayout_5.setObjectName("formLayout_5")
        self.modelAccuracyLabel = QtWidgets.QLabel(self.resultFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelAccuracyLabel.sizePolicy().hasHeightForWidth())
        self.modelAccuracyLabel.setSizePolicy(sizePolicy)
        self.modelAccuracyLabel.setObjectName("modelAccuracyLabel")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.modelAccuracyLabel)
        self.modelAccuracyDisplay = QtWidgets.QLabel(self.resultFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelAccuracyDisplay.sizePolicy().hasHeightForWidth())
        self.modelAccuracyDisplay.setSizePolicy(sizePolicy)
        self.modelAccuracyDisplay.setText("")
        self.modelAccuracyDisplay.setObjectName("modelAccuracyDisplay")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.modelAccuracyDisplay)
        self.verticalLayout_51.addLayout(self.formLayout_5)
        self.modelAccuracyGraphDisplay = QtWidgets.QLabel(self.resultFrame)
        self.modelAccuracyGraphDisplay.setMinimumSize(QtCore.QSize(200, 200))
        self.modelAccuracyGraphDisplay.setMaximumSize(QtCore.QSize(200, 200))
        self.modelAccuracyGraphDisplay.setStyleSheet("background-color: rgb(145, 145, 145);")
        self.modelAccuracyGraphDisplay.setText("")
        self.modelAccuracyGraphDisplay.setObjectName("modelAccuracyGraphDisplay")
        self.verticalLayout_51.addWidget(self.modelAccuracyGraphDisplay)
        self.verticalLayout_51.setStretch(1, 1)
        self.gridLayout_13.addLayout(self.verticalLayout_51, 1, 0, 1, 1)
        self.verticalLayout_52 = QtWidgets.QVBoxLayout()
        self.verticalLayout_52.setObjectName("verticalLayout_52")
        self.formLayout_6 = QtWidgets.QFormLayout()
        self.formLayout_6.setObjectName("formLayout_6")
        self.modelLossLabel = QtWidgets.QLabel(self.resultFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelLossLabel.sizePolicy().hasHeightForWidth())
        self.modelLossLabel.setSizePolicy(sizePolicy)
        self.modelLossLabel.setObjectName("modelLossLabel")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.modelLossLabel)
        self.modelLossDisplay = QtWidgets.QLabel(self.resultFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelLossDisplay.sizePolicy().hasHeightForWidth())
        self.modelLossDisplay.setSizePolicy(sizePolicy)
        self.modelLossDisplay.setText("")
        self.modelLossDisplay.setObjectName("modelLossDisplay")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.modelLossDisplay)
        self.verticalLayout_52.addLayout(self.formLayout_6)
        self.modelLossGraphDisplay = QtWidgets.QLabel(self.resultFrame)
        self.modelLossGraphDisplay.setMinimumSize(QtCore.QSize(200, 200))
        self.modelLossGraphDisplay.setMaximumSize(QtCore.QSize(200, 200))
        self.modelLossGraphDisplay.setStyleSheet("background-color: rgb(145, 145, 145);")
        self.modelLossGraphDisplay.setText("")
        self.modelLossGraphDisplay.setObjectName("modelLossGraphDisplay")
        self.verticalLayout_52.addWidget(self.modelLossGraphDisplay)
        self.verticalLayout_52.setStretch(1, 1)
        self.gridLayout_13.addLayout(self.verticalLayout_52, 1, 1, 1, 1)
        spacerItem14 = QtWidgets.QSpacerItem(20, 78, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_13.addItem(spacerItem14, 2, 0, 1, 1)
        spacerItem15 = QtWidgets.QSpacerItem(20, 78, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_13.addItem(spacerItem15, 2, 1, 1, 1)
        self.horizontalLayout_18.addWidget(self.resultFrame)
        self.horizontalLayout_18.setStretch(0, 3)
        self.horizontalLayout_18.setStretch(1, 2)
        self.verticalLayout_20.addLayout(self.horizontalLayout_18)
        self.tabWidget.addTab(self.modelTrainTab, "")
        self.verticalLayout_5.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.tabWidget.setCurrentIndex(0)
        self.stackedWidget.setCurrentIndex(0)
        self.stackedWidget_2.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setupText(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SMART Motion AI Program"))
        self.mainDisplayLabel.setText(_translate("MainWindow", "MAIN"))
        self.leftDisplayLabel.setText(_translate("MainWindow", "LEFT"))
        self.rightDisplayLabel.setText(_translate("MainWindow", "RIGHT"))
        self.bothDisplayLabel.setText(_translate("MainWindow", "BOTH"))
        self.videoFeedConfigGroupBox.setTitle(_translate("MainWindow", "VIDEO FEED"))
        self.videoSourceLabel.setText(_translate("MainWindow", "Source"))
        self.videoPathLabel.setText(_translate("MainWindow", "Video Folder Path"))
        self.videoPathButton.setText(_translate("MainWindow", "..."))
        self.mediaPipeConfigGroupBox.setTitle(_translate("MainWindow", "MEDIAPIPE CONFIG"))
        self.mpModelComplexLabel.setText(_translate("MainWindow", "Model Complex."))
        self.mpMinTrackLabel.setText(_translate("MainWindow", "Min. Tracking"))
        self.roiMergedSizeLabel.setText(_translate("MainWindow", "ROI Merged Size"))
        self.mpMinDetectLabel.setText(_translate("MainWindow", "Min. Detect"))
        self.mpMaxHandLabel.setText(_translate("MainWindow", "Max. Hands"))
        self.roiSizeLabel.setText(_translate("MainWindow", "ROI Size"))
        self.detectModeButton.setText(_translate("MainWindow", "DETECT"))
        self.recordModeButton.setText(_translate("MainWindow", "RECORD"))
        self.tfliteConfigGroupBox.setTitle(_translate("MainWindow", "TENSORFLOW LITE CONFIG"))
        self.tfLabelPathLabel.setText(_translate("MainWindow", "Label Path"))
        self.tfModelPathLabel.setText(_translate("MainWindow", "Model Path"))
        self.tfModelPathButton.setText(_translate("MainWindow", "..."))
        self.tfLabelPathButton.setText(_translate("MainWindow", "..."))
        self.tfInputRatioLabel.setText(_translate("MainWindow", "Input Ratio"))
        self.tfMinConfidenceLabel.setText(_translate("MainWindow", "Min. Confidence"))
        self.tfSeqSizeLabel.setText(_translate("MainWindow", "Sequence Size"))
        self.masterAndScoreConfigGroupBox.setTitle(_translate("MainWindow", "SCORE"))
        self.saveScoreCheckBox.setText(_translate("MainWindow", "Save to CSV"))
        self.masterFolderPathLabel.setText(_translate("MainWindow", "Master Folder Path"))
        self.saveScorePathLabel.setText(_translate("MainWindow", "Save to..."))
        self.masterFolderPathButton.setText(_translate("MainWindow", "..."))
        self.saveScorePathButton.setText(_translate("MainWindow", "..."))
        self.runDetectModeButton.setText(_translate("MainWindow", "RUN"))
        self.recordOutputPathLabel.setText(_translate("MainWindow", "Output Path"))
        self.recordOutputPathButton.setText(_translate("MainWindow", "..."))
        self.recordOutputCSVCheckBox.setText(_translate("MainWindow", "CSV (.csv)"))
        self.recordOutputVideoCheckBox.setText(_translate("MainWindow", "Video (.mp4)"))
        self.recordOutputImageCheckBox.setText(_translate("MainWindow", "Image (.jpg)"))
        self.recordOutputROIVideoCheckBox.setText(_translate("MainWindow", "ROI Video (.mp4)"))
        self.runRecordModeButton.setText(_translate("MainWindow", "RUN"))
        self.fpsLabel.setText(_translate("MainWindow", "FPS : "))
        self.videoIndexLabel.setText(_translate("MainWindow", "Videos : "))
        self.previousVideoButton.setText(_translate("MainWindow", "PREV. VIDEO"))
        self.pauseVideoButton.setText(_translate("MainWindow", "PAUSE"))
        self.nextVideoButton.setText(_translate("MainWindow", "NEXT VIDEO"))
        self.processLabel.setText(_translate("MainWindow", "Process : "))
        self.scoreLabel.setText(_translate("MainWindow", "Score : "))
        self.scoreDisplay.setText(_translate("MainWindow", "0"))
        self.timeLabel.setText(_translate("MainWindow", "Time : "))
        self.totalTimeLabel.setText(_translate("MainWindow", "Total Time : "))
        self.actionIdleButton.setText(_translate("MainWindow", "START"))
        self.action2Label.setText(_translate("MainWindow", "Action 2"))
        self.action2Button.setText(_translate("MainWindow", "START"))
        self.action1Label.setText(_translate("MainWindow", "Action 1"))
        self.action1Button.setText(_translate("MainWindow", "START"))
        self.action4Label.setText(_translate("MainWindow", "Action 4"))
        self.action3Button.setText(_translate("MainWindow", "START"))
        self.action4Button.setText(_translate("MainWindow", "START"))
        self.action3Label.setText(_translate("MainWindow", "Action 3"))
        self.action5Label.setText(_translate("MainWindow", "Action 5"))
        self.action6Label.setText(_translate("MainWindow", "Action 6"))
        self.action5Button.setText(_translate("MainWindow", "START"))
        self.action7Label.setText(_translate("MainWindow", "Action 7"))
        self.action6Button.setText(_translate("MainWindow", "START"))
        self.action8Label.setText(_translate("MainWindow", "Action 8"))
        self.action7Button.setText(_translate("MainWindow", "START"))
        self.action8Button.setText(_translate("MainWindow", "START"))
        self.action9Button.setText(_translate("MainWindow", "START"))
        self.action9Label.setText(_translate("MainWindow", "Action 9"))
        self.actionIdleLabel.setText(_translate("MainWindow", "Idle"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.mainTab), _translate("MainWindow", "MAIN"))
        self.tfStructureLabel.setText(_translate("MainWindow", "Tensorflow Keras Model Structure"))
        self.datasetFolderPathLabel.setText(_translate("MainWindow", "Video Folder Path"))
        self.datasetFolderPathButton.setText(_translate("MainWindow", "..."))
        self.modelTrainOutputPathLabel.setText(_translate("MainWindow", "Output Path"))
        self.modelTrainOutputPathButton.setText(_translate("MainWindow", "..."))
        self.frameWidthLabel.setText(_translate("MainWindow", "Frame Width"))
        self.frameHeightLabel.setText(_translate("MainWindow", "Frame Height"))
        self.maxFrameLabel.setText(_translate("MainWindow", "Max. Frame"))
        self.findMaxFrameButton.setText(_translate("MainWindow", "FIND MAX."))
        self.validateSizeLabel.setText(_translate("MainWindow", "Validation Size"))
        self.testSizeLabel.setText(_translate("MainWindow", "Test Size"))
        self.batchSizeLabel.setText(_translate("MainWindow", "Batch Size"))
        self.epochLabel.setText(_translate("MainWindow", "Epoch"))
        self.tfModelPresetLabel.setText(_translate("MainWindow", "Model Preset : "))
        self.tfModelLayerLabel.setText(_translate("MainWindow", "TensorFlow Keras Model Layers"))
        self.label_47.setText(_translate("MainWindow", "* frameWidth = Input width, frameHeight = Input height, numberOfClass = Total number of dataset classes"))
        self.trainModelButton.setText(_translate("MainWindow", "TRAIN"))
        self.modelAccuracyLabel.setText(_translate("MainWindow", "Accuracy : "))
        self.modelLossLabel.setText(_translate("MainWindow", "Loss : "))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.modelTrainTab), _translate("MainWindow", "MODEL TRAINING"))

    def setupProgram(self):
        #region 'Add items to Qt widgets'
        self.videoSourceComboBox.addItem("Videos")
        self.videoSourceComboBox.addItem("Camera")

        self.mpModelComplexComboBox.addItem("0")
        self.mpModelComplexComboBox.addItem("1")

        self.mpMaxHandComboBox.addItem("1")
        self.mpMaxHandComboBox.addItem("2")

        self.tfInputRatioComboBox.addItem("0.50")
        self.tfInputRatioComboBox.addItem("0.66")
        self.tfInputRatioComboBox.addItem("0.85")
        self.tfInputRatioComboBox.addItem("1.00")
        #endregion

        #region 'Set Qt widgets default values'
        self.actionIdleText.setPlainText("0_Idle")
        self.action1Text.setPlainText("1_Action 1")
        self.action2Text.setPlainText("2_Action 2")
        self.action3Text.setPlainText("3_Action 3")
        self.action4Text.setPlainText("4_Action 4")
        self.action5Text.setPlainText("5_Action 5")
        self.action6Text.setPlainText("6_Action 6")
        self.action7Text.setPlainText("7_Action 7")
        self.action8Text.setPlainText("8_Action 8")
        self.action9Text.setPlainText("9_Action 9")

        self.mpMinDetectSpinBox.setValue(0.7)
        self.mpMinTrackSpinBox.setValue(0.6)
        self.roiSizeSpinBox.setValue(50)
        self.roiMergedSizeSpinBox.setValue(80)
        self.tfSeqSizeSpinBox.setValue(5)
        self.tfMinConfidenceSpinBox.setValue(0.8)
        #endregion

        #region 'Find and add Tensorflow model layers presets'
        for file in os.listdir(f'{programRoot}/preset model training'):
            if file.endswith('.txt'):
                self.tfModelPresetComboBox.addItem(file.replace('.txt', ''))
        self.tfModelPresetComboBox.addItem('Custom')
        self.modelPresetOnChange()
        #endregion

        #region 'Initializing variables'
        self.trainingInProcess = False
        self.detectModeRunning = False
        self.recordModeRunning = False
        self.recording = False
        self.plotting = False
        self.masterGraph = None
        self.tempRecording = None
        self.processTableViewColumnName = []
        #endregion

        #region 'Connect Qt widgets to methods for user interaction'
        self.detectModeButton.clicked.connect(self.detectModeButtonClick)
        self.recordModeButton.clicked.connect(self.recordModeButtonClick)
        self.runDetectModeButton.clicked.connect(self.runDetectButtonCheck)
        self.videoSourceComboBox.currentTextChanged.connect(self.videoSourceOnChange)
        self.videoSourceComboBox.currentTextChanged.connect(self.runDetectButtonEnable)
        self.videoPathLine.textChanged.connect(self.runDetectButtonEnable)
        self.previousVideoButton.clicked.connect(self.previousVideoClick)
        self.nextVideoButton.clicked.connect(self.nextVideoClick)
        self.pauseVideoButton.clicked.connect(self.pauseVideoClick)
        self.videoPathButton.clicked.connect(self.browseVideoFolder)
        self.tfModelPathButton.clicked.connect(self.browseModelFile)
        self.tfLabelPathButton.clicked.connect(self.browseLabelFile)
        self.masterFolderPathButton.clicked.connect(self.browseMasterFolder)
        self.saveScorePathButton.clicked.connect(self.browseScoreSaveFolder)
        self.recordOutputPathButton.clicked.connect(self.browseRecordSaveFolder)
        self.saveScoreCheckBox.toggled.connect(self.saveScoreCheckboxOnChange)
        self.mpModelComplexComboBox.currentTextChanged.connect(self.mpConfigOnChange)
        self.mpMaxHandComboBox.currentTextChanged.connect(self.mpConfigOnChange)
        self.mpMinDetectSpinBox.valueChanged.connect(self.mpConfigOnChange)
        self.mpMinTrackSpinBox.valueChanged.connect(self.mpConfigOnChange)
        self.roiSizeSpinBox.valueChanged.connect(self.mpConfigOnChange)
        self.roiMergedSizeSpinBox.valueChanged.connect(self.mpConfigOnChange)
        self.tfSeqSizeSpinBox.valueChanged.connect(self.tfConfigOnChange)
        self.tfMinConfidenceSpinBox.valueChanged.connect(self.tfConfigOnChange)
        self.tfInputRatioComboBox.currentTextChanged.connect(self.tfConfigOnChange)
        self.videoPathLine.textChanged.connect(self.runDetectButtonEnable)
        self.tfModelPathLine.textChanged.connect(self.runDetectButtonEnable)
        self.tfLabelPathLine.textChanged.connect(self.runDetectButtonEnable)
        self.masterFolderPathLine.textChanged.connect(self.masterFolderPathLineOnChange)
        self.saveScorePathLine.textChanged.connect(self.runDetectButtonEnable)
        self.recordOutputPathLine.textChanged.connect(self.runRecordButtonEnable)
        self.recordOutputCSVCheckBox.toggled.connect(self.runRecordButtonEnable)
        self.recordOutputImageCheckBox.toggled.connect(self.runRecordButtonEnable)
        self.recordOutputVideoCheckBox.toggled.connect(self.runRecordButtonEnable)
        self.recordOutputROIVideoCheckBox.toggled.connect(self.runRecordButtonEnable)
        self.actionIdleButton.clicked.connect(self.action0Click)
        self.action1Button.clicked.connect(self.action1Click)
        self.action2Button.clicked.connect(self.action2Click)
        self.action3Button.clicked.connect(self.action3Click)
        self.action4Button.clicked.connect(self.action4Click)
        self.action5Button.clicked.connect(self.action5Click)
        self.action6Button.clicked.connect(self.action6Click)
        self.action7Button.clicked.connect(self.action7Click)
        self.action8Button.clicked.connect(self.action8Click)
        self.action9Button.clicked.connect(self.action9Click)
        self.runRecordModeButton.clicked.connect(self.runRecordButtonCheck)
        self.tfModelPresetComboBox.currentTextChanged.connect(self.modelPresetOnChange)
        self.trainModelButton.clicked.connect(self.runModelTrainingButtonCheck)
        self.findMaxFrameButton.clicked.connect(self.findMaxFrame)
        self.datasetFolderPathButton.clicked.connect(self.browseDatasetFolder)
        self.modelTrainOutputPathButton.clicked.connect(self.browseModelTrainSaveFolder)
        self.datasetFolderPathLine.textChanged.connect(self.findMaxFrameButtonEnable)
        self.datasetFolderPathLine.textChanged.connect(self.trainModelButtonEnable)
        self.modelTrainOutputPathLine.textChanged.connect(self.trainModelButtonEnable)
        self.tfModelLayerText.textChanged.connect(self.trainModelButtonEnable)
        #endregion

        #Plot empty graph line for used in graph display
        self.line1, = self.graphDisplay.axes1.plot([], [], color="red")
        self.line2, = self.graphDisplay.axes2.plot([], [], color="blue")

        """ self.videoPathLine.setText('D:/project/smart_motion_ai/videos/CU42_CU180')
        self.tfModelPathLine.setText('D:/project/smart_motion_ai/model/cu42_cu180/Censored info 2 + Only used hand/Model_Video_Date-2022_07_22__11_04_00_Loss-0.43787238001823425_Accuracy-0.874740481376648.tflite')
        self.tfLabelPathLine.setText('D:/project/smart_motion_ai/custom label/cu42_cu180.csv')
        self.masterFolderPathLine.setText('D:/project/smart_motion_ai/master/cu42_cu180')
        self.runDetectButtonEnable() """

    #region 'Program error and warning pop-up'
    def warningPopup(self, msg):
        warningPopup = QtWidgets.QMessageBox(self)
        warningPopup.setWindowTitle('Something is not right...')
        warningPopup.setText(str(msg))
        warningPopup.exec()

    def errorPopup(self, msg):
        errPopup = QtWidgets.QErrorMessage(self)
        errPopup.setWindowTitle('Something went wrong!')
        errPopup.showMessage(msg)
        errPopup.exec()
    #endregion

    #region 'Graph display'
    def startPlot(self, str):
        #Start plotting if not Idle action and program have master data
        if str != 'Idle':
            if self.videoThread.haveMaster:
                self.plotting = True

                #region 'Initializing graph data'
                #Number of X axis data(number of frames)
                self.n_xData = 0

                #Create empty array for append actual action data later
                self.xData = []
                self.yData = []
        
                #Number of X axis master data(number of frames)
                self.n_masterData = len(self.masterGraph[str])

                #Assign master data for current action
                self.xMasterData = list(range(self.n_masterData))
                self.yMasterData = [coord for coord in self.masterGraph[str]]
                #endregion

                #Set X axis data limit
                self.graphDisplay.axes1.set_xlim(0, self.n_masterData - 1)
                self.graphDisplay.axes2.set_xlim(0, self.n_masterData - 1)
        
                #Set X and Y data to line1(master graph line)
                self.line1.set_xdata(self.xMasterData)
                self.line1.set_ydata(self.yMasterData)

                #Do update method for plotting graph line
                self.updatePlot(0)

        """ self.timer = QtCore.QTimer()
        self.timer.setInterval(20)
        self.timer.timeout.connect(self.updatePlot)
        self.timer.start() """

    def stopPlot(self):
        """ try:
            self.timer.timeout.disconnect(self.updatePlot)
        except TypeError:
            pass """
        self.plotting = False

        #Clear all graph lines data
        self.line1.set_xdata([])
        self.line1.set_ydata([])
        self.line2.set_xdata([])
        self.line2.set_ydata([])

        #Rescale graph to fit in program window
        self.graphDisplay.axes1.relim()
        self.graphDisplay.axes1.autoscale_view()
        self.graphDisplay.axes2.relim()
        self.graphDisplay.axes2.autoscale_view()

        #Draw an empty graph display after stop plotting
        self.graphDisplay.draw()

    def updatePlot(self, graphData):
        #If not have data of actual action then exits this method
        if not hasattr(self, 'n_xData'):
            return

        #Check if program is in graph plotting state
        if self.plotting:
            #If number of actual data is larger than master data, Set new X axis data limit
            if self.n_xData > self.n_masterData - 1:
                self.graphDisplay.axes1.set_xlim(0, self.n_xData)
                self.graphDisplay.axes2.set_xlim(0, self.n_xData)

            #Assign X and Y actual action data
            self.yData.append(graphData)
            self.xData.append(self.n_xData)
            
            #Set data to line2(actual data graph line)
            self.line2.set_xdata(self.xData)
            self.line2.set_ydata(self.yData)
            
            #(Increase number of X data(number of frame))
            self.n_xData += 1

            #Rescale graph to fit in program window
            self.graphDisplay.axes1.relim()
            self.graphDisplay.axes1.autoscale_view()
            self.graphDisplay.axes2.relim()
            self.graphDisplay.axes2.autoscale_view()

            #Draw line on graph display agian after updated data
            self.graphDisplay.draw()
    #endregion

    #region 'Method for user interaction in detect mode page'
    def detectModeButtonClick(self):
        self.stackedWidget.setCurrentIndex(0)
        self.stackedWidget_2.setCurrentIndex(0)
             
    def browseVideoFolder(self):
        #dialog = QtWidgets.QFileDialog()
        folderPath = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Video Folder")
        self.videoPathLine.setText(folderPath)

    def browseModelFile(self):
        dialog = QtWidgets.QFileDialog()
        filePath = (dialog.getOpenFileName(None, "Select File", "", "TFLite Model (*.tflite)"))[0]
        self.tfModelPathLine.setText(filePath)

    def browseLabelFile(self):
        dialog = QtWidgets.QFileDialog()
        filePath = (dialog.getOpenFileName(None, "Select File", "", "CSV (*.csv)"))[0]
        self.tfLabelPathLine.setText(filePath)

    def browseMasterFolder(self):
        dialog = QtWidgets.QFileDialog()
        folderPath = dialog.getExistingDirectory(None, "Select Master Folder")
        self.masterFolderPathLine.setText(folderPath)
    
    def browseScoreSaveFolder(self):
        dialog = QtWidgets.QFileDialog()
        folderPath = dialog.getExistingDirectory(None, "Save to...")
        self.saveScorePathLine.setText(folderPath)

    def videoSourceOnChange(self):
        if self.videoSourceComboBox.currentText() == 'Videos':
            self.videoPathLabel.setText('Video Folder Path')
            self.videoPathButton.setEnabled(True)
            self.videoPathLine.clear()
        else:
            self.videoPathLabel.setText('Camera ID')
            self.videoPathButton.setEnabled(False)
            self.videoPathLine.clear()

    def mpConfigOnChange(self):
        try:
            self.videoThread.mpChanged = True
            self.videoThread.mpMaxHand = int(self.mpMaxHandComboBox.currentText())
            self.videoThread.mpModelComplex = int(self.mpModelComplexComboBox.currentText())
            self.videoThread.mpMinDetect = self.mpMinDetectSpinBox.value()
            self.videoThread.mpMinTrack = self.mpMinTrackSpinBox.value()
            self.videoThread.roiSize = self.roiSizeSpinBox.value()
            self.videoThread.combineROISize = self.roiMergedSizeSpinBox.value()
        except AttributeError:
            pass

    def tfConfigOnChange(self):
        try:
            self.videoThread.tfChanged = True
            self.videoThread.modelWindowSize = self.tfSeqSizeSpinBox.value()
            self.videoThread.modelConfidence = self.tfMinConfidenceSpinBox.value()

            if self.tfInputRatioComboBox.currentText() == '0.50':
                self.videoThread.inputRatio = 2
            elif self.tfInputRatioComboBox.currentText() == '0.66':
                self.videoThread.inputRatio = 3
            elif self.tfInputRatioComboBox.currentText() == '0.85':
                self.videoThread.inputRatio = 3.5
            else:
                self.videoThread.inputRatio = 1
        except AttributeError:
            pass

    def masterFolderPathLineOnChange(self):
        if self.masterFolderPathLine.text():
            self.saveScoreCheckBox.setEnabled(True)
        else:
            self.saveScoreCheckBox.setEnabled(False)
            self.saveScoreCheckBox.setChecked(False)

    def saveScoreCheckboxOnChange(self, state):
        self.saveScorePathLabel.setEnabled(state)
        self.saveScorePathLine.setEnabled(state)
        self.saveScorePathButton.setEnabled(state)

        self.runDetectButtonEnable()

    def runDetectButtonEnable(self):
        if self.videoSourceComboBox.currentText() == 'Videos':
            if self.saveScoreCheckBox.isChecked():
                self.runDetectModeButton.setEnabled(bool(self.videoPathLine.text()) and bool(self.tfModelPathLine.text()) and bool(self.tfLabelPathLine.text()) and bool(self.saveScorePathLine.text()))
            else:
                self.runDetectModeButton.setEnabled(bool(self.videoPathLine.text()) and bool(self.tfModelPathLine.text()) and bool(self.tfLabelPathLine.text()))
        else:
            if self.saveScoreCheckBox.isChecked():
                self.runDetectModeButton.setEnabled(bool(self.tfModelPathLine.text()) and bool(self.tfLabelPathLine.text()) and bool(self.saveScorePathLine.text()))
            else:
                self.runDetectModeButton.setEnabled(bool(self.tfModelPathLine.text()) and bool(self.tfLabelPathLine.text()))

    def runDetectButtonCheck(self):
        if self.detectModeRunning:
            self.runDetectModeButton.setEnabled(False)
            self.videoThread.detectMode = False
            self.videoThread.stop()
            self.stopPlot()
            self.videoThread.mainFrameUpdate.disconnect(self.mainFrameUpdateSlot)
            self.videoThread.leftROIFrameUpdate.disconnect(self.leftROIFrameUpdateSlot)
            self.videoThread.rightROIFrameUpdate.disconnect(self.rightROIFrameUpdateSlot)
            self.videoThread.bothROIFrameUpdate.disconnect(self.bothROIFrameUpdateSlot)
            self.videoThread.videoIndexUpdate.disconnect(self.videoIndexUpdateSlot)
            self.videoThread.videoFPSUpdate.disconnect(self.videoFPSUpdateSlot)
            self.videoThread.actionUpdate.disconnect(self.actionUpdateSlot)
            self.videoThread.scoreUpdate.disconnect(self.scoreUpdateSlot)
            self.videoThread.timeUpdate.disconnect(self.timeUpdateSlot)
            self.videoThread.totalTimeUpdate.disconnect(self.totalTimeUpdateSlot)
            self.videoThread.processTableDataFrameUpdate.disconnect(self.processTableUpdateSlot)
            self.videoThread.startPlot.disconnect(self.startPlot)
            self.videoThread.stopPlot.disconnect(self.stopPlot)
            self.videoThread.finished.disconnect(self.videoThreadFinished)
            self.detectModeRunning = False
            self.mainDisplay.clear()
            self.leftDisplay.clear()
            self.rightDisplay.clear()
            self.bothDisplay.clear()
            self.fpsDisplay.clear()
            self.videoIndexDisplay.clear()
            self.processDisplay.clear()
            self.scoreDisplay.setText('')
            self.timeLCD.display(0)
            self.totalTimeLCD.display(0)
            self.processTableView.setModel(None)
            self.runDetectModeButton.setText('RUN')
            self.runDetectModeButton.setStyleSheet('background-color: rgb(85, 255, 127);')
            self.runDetectModeButton.setEnabled(True)
            self.videoFeedConfigGroupBox.setEnabled(True)
            self.tfModelPathLabel.setEnabled(True)
            self.tfModelPathLine.setEnabled(True)
            self.tfModelPathButton.setEnabled(True)
            self.tfLabelPathLabel.setEnabled(True)
            self.tfLabelPathLine.setEnabled(True)
            self.tfLabelPathButton.setEnabled(True)
            self.masterAndScoreConfigGroupBox.setEnabled(True)
            self.recordModeButton.setEnabled(True)
            self.pauseVideoButton.setText('PAUSE')
            self.modelTrainTab.setEnabled(True)
            self.tabWidget.setTabEnabled(1, True)
            self.videoControlButtonEnable()
        else:
            if bool(self.masterFolderPathLine.text()):
                self.masterProcessing()
            else:
                self.startVideoThread()

    def startVideoThread(self):
        self.runDetectModeButton.setEnabled(True)
        self.videoThread = videoThread(self.videoPathLine.text(), programRoot)
        if self.videoSourceComboBox.currentText() == 'Videos':
            self.videoThread.feedFromCamera = False
        else:
            self.videoThread.feedFromCamera = True

        self.videoThread.mainDisplayWidth = self.mainDisplay.width()
        self.videoThread.mainDisplayheight = self.mainDisplay.height()
        self.videoThread.leftROIDisplayWidth = self.leftDisplay.width()
        self.videoThread.leftROIDisplayheight = self.leftDisplay.height()
        self.videoThread.rightROIDisplayWidth = self.rightDisplay.width()
        self.videoThread.rightROIDisplayheight = self.rightDisplay.height()
        self.videoThread.bothROIDisplayWidth = self.bothDisplay.width()
        self.videoThread.bothROIDisplayheight = self.bothDisplay.height()

        self.videoThread.detectMode = True
        self.videoThread.mpMaxHand = int(self.mpMaxHandComboBox.currentText())
        self.videoThread.mpModelComplex = int(self.mpModelComplexComboBox.currentText())
        self.videoThread.mpMinDetect = self.mpMinDetectSpinBox.value()
        self.videoThread.mpMinTrack = self.mpMinTrackSpinBox.value()
        self.videoThread.roiSize = self.roiSizeSpinBox.value()
        self.videoThread.combineROISize = self.roiMergedSizeSpinBox.value()
        self.videoThread.modelPath = self.tfModelPathLine.text()
        self.videoThread.labelPath = self.tfLabelPathLine.text()
        self.videoThread.modelWindowSize = self.tfSeqSizeSpinBox.value()
        self.videoThread.modelConfidence = self.tfMinConfidenceSpinBox.value()
        self.videoThread.masterPath = self.masterFolderPathLine.text()
        self.videoThread.saveScorePath = self.saveScorePathLine.text()

        if self.tfInputRatioComboBox.currentText() == '0.50':
            self.videoThread.inputRatio = 2
        elif self.tfInputRatioComboBox.currentText() == '0.66':
            self.videoThread.inputRatio = 3
        elif self.tfInputRatioComboBox.currentText() == '0.85':
            self.videoThread.inputRatio = 3.5
        else:
            self.videoThread.inputRatio = 1

        if self.saveScoreCheckBox.isChecked():
            self.videoThread.saveScore = True
        else:
            self.videoThread.saveScore = False

        self.videoThread.mainFrameUpdate.connect(self.mainFrameUpdateSlot)
        self.videoThread.leftROIFrameUpdate.connect(self.leftROIFrameUpdateSlot)
        self.videoThread.rightROIFrameUpdate.connect(self.rightROIFrameUpdateSlot)
        self.videoThread.bothROIFrameUpdate.connect(self.bothROIFrameUpdateSlot)
        self.videoThread.videoIndexUpdate.connect(self.videoIndexUpdateSlot)
        self.videoThread.videoFPSUpdate.connect(self.videoFPSUpdateSlot)
        self.videoThread.actionUpdate.connect(self.actionUpdateSlot)
        self.videoThread.scoreUpdate.connect(self.scoreUpdateSlot)
        self.videoThread.timeUpdate.connect(self.timeUpdateSlot)
        self.videoThread.totalTimeUpdate.connect(self.totalTimeUpdateSlot)
        self.videoThread.processTableDataFrameUpdate.connect(self.processTableUpdateSlot)
        self.videoThread.startPlot.connect(self.startPlot)
        self.videoThread.stopPlot.connect(self.stopPlot)
        self.videoThread.updatePlot.connect(self.updatePlot)
        self.videoThread.error.connect(self.warningPopup)
        self.videoThread.finished.connect(self.videoThreadFinished)

        self.videoThread.start()
        self.startPlot('Idle')

        self.detectModeRunning = True
        self.runDetectModeButton.setText('STOP')
        self.runDetectModeButton.setStyleSheet('background-color: rgb(255, 85, 127);')
        self.videoFeedConfigGroupBox.setEnabled(False)
        self.tfModelPathLabel.setEnabled(False)
        self.tfModelPathLine.setEnabled(False)
        self.tfModelPathButton.setEnabled(False)
        self.tfLabelPathLabel.setEnabled(False)
        self.tfLabelPathLine.setEnabled(False)
        self.tfLabelPathButton.setEnabled(False)
        self.masterAndScoreConfigGroupBox.setEnabled(False)
        self.recordModeButton.setEnabled(False)
        self.modelTrainTab.setEnabled(False)
        self.tabWidget.setTabEnabled(1, False)
        self.videoControlButtonEnable()

    def masterProcessing(self):
        self.masterProcess = popUpProcessMasterData(programRoot)
        self.masterProcess.masterFolderPath = self.masterFolderPathLine.text()
        self.masterProcess.modelComplex = int(self.mpModelComplexComboBox.currentText())
        self.masterProcess.maxHand = int(self.mpMaxHandComboBox.currentText())
        self.masterProcess.minDetect = self.mpMinDetectSpinBox.value()
        self.masterProcess.minTracking = self.mpMinTrackSpinBox.value()
        self.masterProcess.masterGraph.connect(self.getMasterGraph)
        self.masterProcess.finished.connect(self.startVideoThread)

        self.runDetectModeButton.setEnabled(False)
        self.masterProcess.show()
        self.masterProcess.startProcess()

    def getMasterGraph(self, dict):
        self.masterGraph = dict

    def videoThreadFinished(self):
        self.runDetectModeButton.setText('RUN')
        self.runDetectModeButton.setStyleSheet('background-color:rgb(85, 255, 127);')
        self.runRecordModeButton.setText('RUN')
        self.runRecordModeButton.setStyleSheet('background-color:rgb(85, 255, 127);')
        self.runDetectModeButton.setEnabled(True)
        self.runRecordModeButton.setEnabled(True)
        self.videoFeedConfigGroupBox.setEnabled(True)
        self.tfModelPathLabel.setEnabled(True)
        self.tfModelPathLine.setEnabled(True)
        self.tfModelPathButton.setEnabled(True)
        self.tfLabelPathLabel.setEnabled(True)
        self.tfLabelPathLine.setEnabled(True)
        self.tfLabelPathButton.setEnabled(True)
        self.masterAndScoreConfigGroupBox.setEnabled(True)
        self.recordModeButton.setEnabled(True)
        self.pauseVideoButton.setText('PAUSE')
        self.modelTrainTab.setEnabled(True)
        self.tabWidget.setTabEnabled(1, True)
        self.videoControlButtonEnable()

        self.videoThread.mainFrameUpdate.disconnect(self.mainFrameUpdateSlot)
        self.videoThread.leftROIFrameUpdate.disconnect(self.leftROIFrameUpdateSlot)
        self.videoThread.rightROIFrameUpdate.disconnect(self.rightROIFrameUpdateSlot)
        self.videoThread.bothROIFrameUpdate.disconnect(self.bothROIFrameUpdateSlot)
        self.videoThread.videoIndexUpdate.disconnect(self.videoIndexUpdateSlot)
        self.videoThread.videoFPSUpdate.disconnect(self.videoFPSUpdateSlot)
        self.videoThread.finished.disconnect(self.videoThreadFinished)

        if self.detectModeRunning:
            self.detectModeRunning = False
            self.videoThread.actionUpdate.disconnect(self.actionUpdateSlot)
            self.videoThread.scoreUpdate.disconnect(self.scoreUpdateSlot)
            self.videoThread.timeUpdate.disconnect(self.timeUpdateSlot)
            self.videoThread.totalTimeUpdate.disconnect(self.totalTimeUpdateSlot)
            self.videoThread.processTableDataFrameUpdate.disconnect(self.processTableUpdateSlot)

        elif self.recordModeRunning:
            self.recordModeRunning = False
            self.videoThread.forceStopRecord.disconnect(self.forceStopRecord)
            self.videoThread.recordStatusUpdate.disconnect(self.recordStatusUpdateSlot)

        self.modelTrainTab.setEnabled(True)
        self.tabWidget.setTabEnabled(1, True)
#endregion
 
    #region 'Method for user interaction in record mode page'
    def recordModeButtonClick(self):
        self.stackedWidget.setCurrentIndex(1)
        self.stackedWidget_2.setCurrentIndex(1)

    def browseRecordSaveFolder(self):
        dialog = QtWidgets.QFileDialog()
        folderPath = dialog.getExistingDirectory(None, "Save to...")
        self.recordOutputPathLine.setText(folderPath)

    def runRecordButtonCheck(self):
        if self.recordModeRunning:
            self.runRecordModeButton.setEnabled(False)
            self.videoThread.recordMode = False

            self.videoThread.stop()

            self.videoThread.mainFrameUpdate.disconnect(self.mainFrameUpdateSlot)
            self.videoThread.leftROIFrameUpdate.disconnect(self.leftROIFrameUpdateSlot)
            self.videoThread.rightROIFrameUpdate.disconnect(self.rightROIFrameUpdateSlot)
            self.videoThread.bothROIFrameUpdate.disconnect(self.bothROIFrameUpdateSlot)
            self.videoThread.videoIndexUpdate.disconnect(self.videoIndexUpdateSlot)
            self.videoThread.videoFPSUpdate.disconnect(self.videoFPSUpdateSlot)
            self.videoThread.forceStopRecord.disconnect(self.forceStopRecord)
            self.videoThread.recordStatusUpdate.disconnect(self.recordStatusUpdateSlot)
            self.videoThread.finished.disconnect(self.videoThreadFinished)
            self.recordModeRunning = False
            self.recording = False

            self.mainDisplay.clear()
            self.leftDisplay.clear()
            self.rightDisplay.clear()
            self.bothDisplay.clear()
            self.fpsDisplay.clear()
            self.videoIndexDisplay.clear()
            self.runRecordModeButton.setText('RUN')
            self.runRecordModeButton.setStyleSheet('background-color: rgb(85, 255, 127);')
            self.runRecordModeButton.setEnabled(True)
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.videoFeedConfigGroupBox.setEnabled(True)
            self.recordOutputPathLabel.setEnabled(True)
            self.recordOutputPathLine.setEnabled(True)
            self.recordOutputPathButton.setEnabled(True)
            self.recordOutputCSVCheckBox.setEnabled(True)
            self.recordOutputImageCheckBox.setEnabled(True)
            self.recordOutputROIVideoCheckBox.setEnabled(True)
            self.recordOutputVideoCheckBox.setEnabled(True)
            self.detectModeButton.setEnabled(True)
            self.pauseVideoButton.setText('PAUSE')
            self.modelTrainTab.setEnabled(True)
            self.tabWidget.setTabEnabled(1, True)
            self.videoControlButtonEnable()
        else:
            self.videoThread = videoThread(self.videoPathLine.text(), programRoot)
            if self.videoSourceComboBox.currentText() == 'Videos':
                self.videoThread.feedFromCamera = False
            else:
                self.videoThread.feedFromCamera = True

            self.videoThread.mainDisplayWidth = self.mainDisplay.width()
            self.videoThread.mainDisplayheight = self.mainDisplay.height()
            self.videoThread.leftROIDisplayWidth = self.leftDisplay.width()
            self.videoThread.leftROIDisplayheight = self.leftDisplay.height()
            self.videoThread.rightROIDisplayWidth = self.rightDisplay.width()
            self.videoThread.rightROIDisplayheight = self.rightDisplay.height()
            self.videoThread.bothROIDisplayWidth = self.bothDisplay.width()
            self.videoThread.bothROIDisplayheight = self.bothDisplay.height()

            self.videoThread.mpMaxHand = int(self.mpMaxHandComboBox.currentText())
            self.videoThread.mpModelComplex = int(self.mpModelComplexComboBox.currentText())
            self.videoThread.mpMinDetect = self.mpMinDetectSpinBox.value()
            self.videoThread.mpMinTrack = self.mpMinTrackSpinBox.value()
            self.videoThread.roiSize = self.roiSizeSpinBox.value()
            self.videoThread.combineROISize = self.roiMergedSizeSpinBox.value()
            self.videoThread.modelPath = self.tfModelPathLine.text()
            self.videoThread.labelPath = self.tfLabelPathLine.text()
            self.videoThread.modelWindowSize = self.tfSeqSizeSpinBox.value()
            self.videoThread.modelConfidence = self.tfMinConfidenceSpinBox.value()

            if self.tfInputRatioComboBox.currentText() == '0.50':
                self.videoThread.inputRatio = 2
            elif self.tfInputRatioComboBox.currentText() == '0.66':
                self.videoThread.inputRatio = 3
            elif self.tfInputRatioComboBox.currentText() == '0.85':
                self.videoThread.inputRatio = 3.5
            else:
                self.videoThread.inputRatio = 1

            self.videoThread.mainFrameUpdate.connect(self.mainFrameUpdateSlot)
            self.videoThread.leftROIFrameUpdate.connect(self.leftROIFrameUpdateSlot)
            self.videoThread.rightROIFrameUpdate.connect(self.rightROIFrameUpdateSlot)
            self.videoThread.bothROIFrameUpdate.connect(self.bothROIFrameUpdateSlot)
            self.videoThread.videoIndexUpdate.connect(self.videoIndexUpdateSlot)
            self.videoThread.videoFPSUpdate.connect(self.videoFPSUpdateSlot)
            self.videoThread.forceStopRecord.connect(self.forceStopRecord)
            self.videoThread.recordStatusUpdate.connect(self.recordStatusUpdateSlot)
            self.videoThread.finished.connect(self.videoThreadFinished)

            self.videoThread.recordMode = True
            self.videoThread.saveVideo = False
            self.videoThread.saveVideoROI = False
            self.videoThread.saveCSV = False
            self.videoThread.saveImage = False
            if self.recordOutputVideoCheckBox.isChecked():
                self.videoThread.saveVideo = True
            if self.recordOutputROIVideoCheckBox.isChecked():
                self.videoThread.saveVideoROI = True
            if self.recordOutputCSVCheckBox.isChecked():
                self.videoThread.saveCSV = True
            if self.recordOutputImageCheckBox.isChecked():
                self.videoThread.saveImage = True

            self.videoThread.saveRecordPath = self.recordOutputPathLine.text()

            self.videoThread.start()

            self.recordModeRunning = True
            self.runRecordModeButton.setText('STOP')
            self.runRecordModeButton.setStyleSheet('background-color: rgb(255, 85, 127);')

            self.videoFeedConfigGroupBox.setEnabled(False)
            self.recordOutputPathLabel.setEnabled(False)
            self.recordOutputPathLine.setEnabled(False)
            self.recordOutputPathButton.setEnabled(False)
            self.recordOutputCSVCheckBox.setEnabled(False)
            self.recordOutputImageCheckBox.setEnabled(False)
            self.recordOutputROIVideoCheckBox.setEnabled(False)
            self.recordOutputVideoCheckBox.setEnabled(False)
            self.detectModeButton.setEnabled(False)
            self.modelTrainTab.setEnabled(False)
            self.tabWidget.setTabEnabled(1, False)
            self.videoControlButtonEnable()
  
    def runRecordButtonEnable(self):
        if not self.recording:
            self.runRecordModeButton.setEnabled(bool(self.recordOutputPathLine.text()) and (self.recordOutputImageCheckBox.isChecked() or self.recordOutputVideoCheckBox
                                                .isChecked() or self.recordOutputROIVideoCheckBox.isChecked() or self.recordOutputCSVCheckBox.isChecked()))
        else:
            self.runRecordModeButton.setEnabled(False)

    def videoControlButtonEnable(self):
        if self.videoSourceComboBox.currentText() == 'Videos':
            self.previousVideoButton.setEnabled(self.detectModeRunning or self.recordModeRunning)
            self.pauseVideoButton.setEnabled(self.detectModeRunning or self.recordModeRunning)
            self.nextVideoButton.setEnabled(self.detectModeRunning or self.recordModeRunning)
    
    def previousVideoClick(self):
        if self.recording:
            return

        self.videoThread.videoInterrupt = True
        self.videoThread.currentVideo -= 1
        
        if self.videoThread.currentVideo < 0:
            self.videoThread.currentVideo = 0

        if self.detectModeRunning:
            self.stopPlot()

    def nextVideoClick(self):
        if self.recording:
            return
        
        self.videoThread.videoInterrupt = True
        self.videoThread.currentVideo += 1
        
        if self.videoThread.currentVideo >= len(self.videoThread.videoPath):
            self.videoThread.currentVideo = len(self.videoThread.videoPath) - 1

        if self.detectModeRunning:
            self.stopPlot()

    def pauseVideoClick(self):
        if self.videoThread.videoPause:
            self.videoThread.videoPause = False
            self.pauseVideoButton.setText('PAUSE')
            self.plotting = True
        else:
            self.videoThread.videoPause = True
            self.pauseVideoButton.setText('RESUME')
            self.plotting = False
 
    def action0Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.actionIdleButton.setText('START')
            self.actionIdleButton.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.action1Button.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Button.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 0
            self.videoThread.action = 0
            self.videoThread.actionText = self.actionIdleText.toPlainText().replace('\n','')
            self.videoThread.startRecord = True            
            self.actionIdleButton.setText('RECORDING...')
            self.actionIdleButton.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
        self.runRecordButtonEnable()

    def action1Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action1Button.setText('START')
            self.action1Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Button.setEnabled(True)
            self.action1Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 1
            self.videoThread.action = 1
            self.videoThread.actionText = self.action1Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True   
            self.action1Button.setText('RECORDING...')
            self.action1Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.action1Text.setEnabled(False)
        self.runRecordButtonEnable()

    def action2Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action2Button.setText('START')
            self.action2Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action1Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Button.setEnabled(True)
            self.action2Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 2
            self.videoThread.action = 2
            self.videoThread.actionText = self.action2Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True  
            self.action2Button.setText('RECORDING...')
            self.action2Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.action2Text.setEnabled(False)
        self.runRecordButtonEnable()

    def action3Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action3Button.setText('START')
            self.action3Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action1Button.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Button.setEnabled(True)
            self.action3Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 3
            self.videoThread.action = 3
            self.videoThread.actionText = self.action3Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True  
            self.action3Button.setText('RECORDING...')
            self.action3Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.action3Text.setEnabled(False)
        self.runRecordButtonEnable()

    def action4Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action4Button.setText('START')
            self.action4Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action1Button.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Button.setEnabled(True)
            self.action4Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 4
            self.videoThread.action = 4
            self.videoThread.actionText = self.action4Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True
            self.action4Button.setText('RECORDING...')
            self.action4Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.action4Text.setEnabled(False)
        self.runRecordButtonEnable()

    def action5Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action5Button.setText('START')
            self.action5Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action1Button.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Button.setEnabled(True)
            self.action5Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 5
            self.videoThread.action = 5
            self.videoThread.actionText = self.action5Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True
            self.action5Button.setText('RECORDING...')
            self.action5Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.action5Text.setEnabled(False)
        self.runRecordButtonEnable()

    def action6Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action6Button.setText('START')
            self.action6Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action1Button.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Button.setEnabled(True)
            self.action6Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 6
            self.videoThread.action = 6
            self.videoThread.actionText = self.action6Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True
            self.action6Button.setText('RECORDING...')
            self.action6Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.action6Text.setEnabled(False)
        self.runRecordButtonEnable()

    def action7Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action7Button.setText('START')
            self.action7Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action1Button.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Button.setEnabled(True)
            self.action7Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 7
            self.videoThread.action = 7
            self.videoThread.actionText = self.action7Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True
            self.action7Button.setText('RECORDING...')
            self.action7Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.action7Text.setEnabled(False)
        self.runRecordButtonEnable()

    def action8Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action8Button.setText('START')
            self.action8Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action1Button.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action9Button.setEnabled(True)
            self.action8Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 8
            self.videoThread.action = 8
            self.videoThread.actionText = self.action8Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True
            self.action8Button.setText('RECORDING...')
            self.action8Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action9Button.setEnabled(False)
            self.action8Text.setEnabled(False)
        self.runRecordButtonEnable()
    
    def action9Click(self):
        if self.recording:
            self.recording = False
            self.tempRecording = None
            self.videoThread.stopRecord = True
            self.action9Button.setText('START')
            self.action9Button.setStyleSheet('background-color: rgb(225, 225, 225);')
            self.actionIdleButton.setEnabled(True)
            self.action1Button.setEnabled(True)
            self.action2Button.setEnabled(True)
            self.action3Button.setEnabled(True)
            self.action4Button.setEnabled(True)
            self.action5Button.setEnabled(True)
            self.action6Button.setEnabled(True)
            self.action7Button.setEnabled(True)
            self.action8Button.setEnabled(True)
            self.action9Text.setEnabled(True)
        else:
            self.recording = True
            self.tempRecording = 9
            self.videoThread.action = 9
            self.videoThread.actionText = self.action9Text.toPlainText().replace('\n','')
            self.videoThread.startRecord = True
            self.action9Button.setText('RECORDING...')
            self.action9Button.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.actionIdleButton.setEnabled(False)
            self.action1Button.setEnabled(False)
            self.action2Button.setEnabled(False)
            self.action3Button.setEnabled(False)
            self.action4Button.setEnabled(False)
            self.action5Button.setEnabled(False)
            self.action6Button.setEnabled(False)
            self.action7Button.setEnabled(False)
            self.action8Button.setEnabled(False)
            self.action9Text.setEnabled(False)
        self.runRecordButtonEnable()

    def forceStopRecord(self):
        self.recording = False
        self.tempRecording = None
        self.actionIdleButton.setEnabled(True)
        self.action1Button.setEnabled(True)
        self.action2Button.setEnabled(True)
        self.action3Button.setEnabled(True)
        self.action4Button.setEnabled(True)
        self.action5Button.setEnabled(True)
        self.action6Button.setEnabled(True)
        self.action7Button.setEnabled(True)
        self.action8Button.setEnabled(True)
        self.action9Button.setEnabled(True)

        self.actionIdleButton.setText('START')
        self.action1Button.setText('START')
        self.action2Button.setText('START')
        self.action3Button.setText('START')
        self.action4Button.setText('START')
        self.action5Button.setText('START')
        self.action6Button.setText('START')
        self.action7Button.setText('START')
        self.action8Button.setText('START')
        self.action9Button.setText('START')

        self.actionIdleButton.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action1Button.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action2Button.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action3Button.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action4Button.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action5Button.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action6Button.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action7Button.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action8Button.setStyleSheet('background-color: rgb(225, 225, 225);')
        self.action9Button.setStyleSheet('background-color: rgb(225, 225, 225);')

        self.action1Text.setEnabled(True)
        self.action2Text.setEnabled(True)
        self.action3Text.setEnabled(True)
        self.action4Text.setEnabled(True)
        self.action5Text.setEnabled(True)
        self.action6Text.setEnabled(True)
        self.action7Text.setEnabled(True)
        self.action8Text.setEnabled(True)
        self.action9Text.setEnabled(True)

    def keyPressEvent(self, event):
        if self.stackedWidget_2.currentWidget() == self.recordModeMainPage and self.recordModeRunning:
            if event.key() == QtCore.Qt.Key.Key_0:
                if self.tempRecording is None or self.tempRecording == 0:
                    self.action0Click()
            elif event.key() == QtCore.Qt.Key.Key_1:
                if self.tempRecording is None or self.tempRecording == 1:
                    self.action1Click()
            elif event.key() == QtCore.Qt.Key.Key_2:
                if self.tempRecording is None or self.tempRecording == 2:
                    self.action2Click()
            elif event.key() == QtCore.Qt.Key.Key_3:
                if self.tempRecording is None or self.tempRecording == 3:
                    self.action3Click()
            elif event.key() == QtCore.Qt.Key.Key_4:
                if self.tempRecording is None or self.tempRecording == 4:
                    self.action4Click()
            elif event.key() == QtCore.Qt.Key.Key_5:
                if self.tempRecording is None or self.tempRecording == 5:
                    self.action5Click()
            elif event.key() == QtCore.Qt.Key.Key_6:
                if self.tempRecording is None or self.tempRecording == 6:
                    self.action6Click()
            elif event.key() == QtCore.Qt.Key.Key_7:
                if self.tempRecording is None or self.tempRecording == 7:
                    self.action7Click()
            elif event.key() == QtCore.Qt.Key.Key_8:
                if self.tempRecording is None or self.tempRecording == 8:
                    self.action8Click()
            elif event.key() == QtCore.Qt.Key.Key_9:
                if self.tempRecording is None or self.tempRecording == 9:
                    self.action9Click()
            elif event.key() == QtCore.Qt.Key.Key_Space:
                self.pauseVideoClick()
            elif event.key() == QtCore.Qt.Key.Key_Comma:
                self.previousVideoClick()
            elif event.key() == QtCore.Qt.Key.Key_Period:
                self.nextVideoClick()
    #endregion

    #region 'Method for user interaction in model training page'
    def browseDatasetFolder(self):
        dialog = QtWidgets.QFileDialog()
        folderPath = dialog.getExistingDirectory(None, "Select Dataset Folder")
        self.datasetFolderPathLine.setText(folderPath)

    def browseModelTrainSaveFolder(self):
        dialog = QtWidgets.QFileDialog()
        folderPath = dialog.getExistingDirectory(None, "Save to...")
        self.modelTrainOutputPathLine.setText(folderPath)
  
    def modelPresetOnChange(self):
        if self.tfModelPresetComboBox.currentText() == 'Custom':
            self.tfModelLayerText.setEnabled(True)
            self.frameWidthSpinBox.setValue(0)
            self.frameHeightSpinBox.setValue(0)
            self.maxFrameSpinBox.setValue(0)
            self.validateSizeSpinBox.setValue(0)
            self.testSizeSpinBox.setValue(0)
            self.epochSpinBox.setValue(0)
            self.batchSizeSpinBox.setValue(0)

        else:
            self.tfModelLayerText.setEnabled(False)
            self.tfModelLayerText.clear()

            lines = []
            with open(f'{programRoot}/preset model training/{self.tfModelPresetComboBox.currentText()}.txt') as f:
                lines = (line.rstrip() for line in f) # All lines including the blank ones
                lines = (line for line in lines if line) # Non-blank lines

                for line in lines:
                    if 'frame_width' in line:
                        self.frameWidthSpinBox.setValue(int(line.split('=')[-1].strip()))
                    elif 'frame_height' in line:
                        self.frameHeightSpinBox.setValue(int(line.split('=')[-1].strip()))
                    elif 'max_frame_per_class' in line:
                        self.maxFrameSpinBox.setValue(int(line.split('=')[-1].strip()))
                    elif 'validateSize' in line:
                        self.validateSizeSpinBox.setValue(float(line.split('=')[-1].strip()))
                    elif 'testSize' in line:
                        self.testSizeSpinBox.setValue(float(line.split('=')[-1].strip()))
                    elif 'epoch' in line:
                        self.epochSpinBox.setValue(int(line.split('=')[-1].strip()))
                    elif 'batchSize' in line:
                        self.batchSizeSpinBox.setValue(int(line.split('=')[-1].strip()))
                    else:
                        self.tfModelLayerText.insertPlainText(f'{line}\n')

    def runModelTrainingButtonCheck(self):
        if self.trainingInProcess:
            self.trainingInProcess = False
            self.modelTraining.terminate = True
            self.modelTraining.stop()
            self.modelTraining.consoleLine.disconnect(self.consoleOutputDisplayUpdateSlot)
            self.modelTraining.modelStructurePath.disconnect(self.modelStructureDisplayUpdateSlot)
            self.modelTraining.accuracyValue.disconnect(self.accuracyValueUpdateSlot)
            self.modelTraining.lossValue.disconnect(self.lossValueUpdateSlot)
            self.modelTraining.accuracyFigPath.disconnect(self.accuracyGraphDisplayUpdateSlot)
            self.modelTraining.lossFigPath.disconnect(self.lossGraphDisplayUpdateSlot)
            self.modelTraining.finished.disconnect(self.trainModelFinished)
            self.consoleOutputDisplay.clear()
            self.tfModelStructureDisplay.clear()
            self.modelAccuracyDisplay.setText('')
            self.modelLossDisplay.setText('')
            self.modelAccuracyGraphDisplay.clear()
            self.modelLossGraphDisplay.clear()
            self.trainModelButton.setText('TRAIN')
            self.trainModelButton.setStyleSheet('background-color: rgb(85, 255, 127);')

            self.mainTab.setEnabled(True)
            self.tabWidget.setTabEnabled(0, True)
        else:
            self.trainingInProcess = True
            self.trainModelButton.setText('CANCEL')
            self.trainModelButton.setStyleSheet('background-color: rgb(255, 85, 127);')
            self.modelTraining = trainModel()
            self.modelTraining.modelPreset = self.tfModelPresetComboBox.currentText()
            self.modelTraining.dataset_directory = self.datasetFolderPathLine.text()
            self.modelTraining.outputPath = self.modelTrainOutputPathLine.text()
            self.modelTraining.frame_width = self.frameWidthSpinBox.value()
            self.modelTraining.frame_height = self.frameHeightSpinBox.value()
            self.modelTraining.max_frame_per_class = self.maxFrameSpinBox.value()
            self.modelTraining.validateSize = self.validateSizeSpinBox.value()
            self.modelTraining.testSize = self.testSizeSpinBox.value()
            self.modelTraining.batchSize = self.batchSizeSpinBox.value()
            self.modelTraining.epoch = self.epochSpinBox.value()

            modelLayers = self.tfModelLayerText.toPlainText().split("\n")
            modelLayers.remove('')

            self.modelTraining.modelLayers = modelLayers

            self.modelTraining.consoleLine.connect(self.consoleOutputDisplayUpdateSlot)
            self.modelTraining.modelStructurePath.connect(self.modelStructureDisplayUpdateSlot)
            self.modelTraining.accuracyValue.connect(self.accuracyValueUpdateSlot)
            self.modelTraining.lossValue.connect(self.lossValueUpdateSlot)
            self.modelTraining.accuracyFigPath.connect(self.accuracyGraphDisplayUpdateSlot)
            self.modelTraining.lossFigPath.connect(self.lossGraphDisplayUpdateSlot)
            self.modelTraining.finished.connect(self.trainModelFinished)

            self.modelTraining.start()

            """ self.mainTab.setEnabled(False)
            self.tabWidget.setTabEnabled(0, False) """
  
    def findMaxFrameButtonEnable(self):
        self.findMaxFrameButton.setEnabled(bool(self.datasetFolderPathLine.text()))

    def trainModelButtonEnable(self):
        if self.tfModelPresetComboBox.currentText() == 'Custom':
            self.trainModelButton.setEnabled(bool(self.datasetFolderPathLine.text()) and bool(self.modelTrainOutputPathLine.text()) and bool(self.tfModelLayerText.toPlainText()))
        else:
            self.trainModelButton.setEnabled(bool(self.datasetFolderPathLine.text()) and bool(self.modelTrainOutputPathLine.text()))
    
    def findMaxFrame(self):
        self.findMaxFrameButton.setText('CALCULATING..')
        self.maxFrameSpinBox.setValue(findMaxFrame(self.datasetFolderPathLine.text()))
        self.findMaxFrameButton.setText('FIND MAX.')

    def trainModelFinished(self):
        self.trainingInProcess = False
        self.trainModelButton.setText('TRAIN AGAIN')
        self.trainModelButton.setStyleSheet('background-color:rgb(85, 255, 127);')
        self.modelTraining.consoleLine.disconnect(self.consoleOutputDisplayUpdateSlot)
        self.modelTraining.modelStructurePath.disconnect(self.modelStructureDisplayUpdateSlot)
        self.modelTraining.accuracyValue.disconnect(self.accuracyValueUpdateSlot)
        self.modelTraining.lossValue.disconnect(self.lossValueUpdateSlot)
        self.modelTraining.accuracyFigPath.disconnect(self.accuracyGraphDisplayUpdateSlot)
        self.modelTraining.lossFigPath.disconnect(self.lossGraphDisplayUpdateSlot)
        self.modelTraining.finished.disconnect(self.trainModelFinished)
        self.mainTab.setEnabled(True)
        self.tabWidget.setTabEnabled(0, True)
    #endregion

    #region 'PyqtSlot for show and update data on GUI'
    #region 'PyqtSlot for detect mode page display'
    def mainFrameUpdateSlot(self, frame):
        self.mainDisplay.setPixmap(QtGui.QPixmap.fromImage(frame))

    def leftROIFrameUpdateSlot(self, frame):
        self.leftDisplay.setPixmap(QtGui.QPixmap.fromImage(frame))
    
    def rightROIFrameUpdateSlot(self, frame):
        self.rightDisplay.setPixmap(QtGui.QPixmap.fromImage(frame))

    def bothROIFrameUpdateSlot(self, frame):
        self.bothDisplay.setPixmap(QtGui.QPixmap.fromImage(frame))
    
    def videoIndexUpdateSlot(self, str):
        self.videoIndexDisplay.setText(str)

    def videoFPSUpdateSlot(self, int):
        self.fpsDisplay.setText(str(int))

    def actionUpdateSlot(self, str):
        self.processDisplay.setText(str)

    def scoreUpdateSlot(self, score):
        if score is not None:
            self.scoreDisplay.setText('{:.2f}'.format(score))
        else:
            self.scoreDisplay.setText('')

    def timeUpdateSlot(self, float):
        self.timeLCD.display('{:.2f}'.format(float))

    def totalTimeUpdateSlot(self, float):
        self.totalTimeLCD.display('{:.2f}'.format(float))

    def processTableUpdateSlot(self, dataFrame):
        self.model = TableModel(dataFrame)
        self.processTableView.setModel(self.model)

        self.processTableView.horizontalHeader().setMinimumHeight(75)
        self.processTableView.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignmentFlag.AlignCenter | QtCore.Qt.TextFlag.TextWordWrap)
        self.processTableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.processTableView.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.processTableView.setStyleSheet('::section{background-color:rgb(174, 214, 241);}')
        self.processTableView.horizontalHeader().setStyleSheet('::section{background-color:rgb(174, 214, 241);}')
        self.processTableView.verticalHeader().setStyleSheet('::section{background-color:rgb(213, 219, 219);}')
    #endregion

    #region 'PyqtSlot for record mode page display'
    def recordStatusUpdateSlot(self, str):
        self.recordStatusDisplay.setText(str)
    #endregion

    #region 'PyqtSlot for train mode page display'
    def modelStructureDisplayUpdateSlot(self, imgPath):
        if os.path.isfile(imgPath):
            pixmap = QtGui.QPixmap(imgPath)
            self.tfModelStructureDisplay.setPixmap(pixmap)
            self.tfModelStructureDisplay.setScaledContents(True)
            self.tfModelStructureDisplay.setSizePolicy(QtWidgets.QSizePolicy.Policy.Ignored, QtWidgets.QSizePolicy.Policy.Ignored)

    def consoleOutputDisplayUpdateSlot(self, line):
        self.consoleOutputDisplay.moveCursor(QtGui.QTextCursor.MoveOperation.End)
        self.consoleOutputDisplay.append(line)
        self.consoleOutputDisplay.moveCursor(QtGui.QTextCursor.MoveOperation.End)

    def accuracyValueUpdateSlot(self, float):
        self.modelAccuracyDisplay.setText('{:.4f}'.format(float))

    def lossValueUpdateSlot(self, float):
        self.modelLossDisplay.setText('{:.4f}'.format(float))
   
    def accuracyGraphDisplayUpdateSlot(self, imgPath):
        pixmap = QtGui.QPixmap(imgPath)
        self.modelAccuracyGraphDisplay.setPixmap(pixmap)
        self.modelAccuracyGraphDisplay.setScaledContents(True)
        self.modelAccuracyGraphDisplay.setSizePolicy(QtWidgets.QSizePolicy.Policy.Ignored, QtWidgets.QSizePolicy.Policy.Ignored)

    def lossGraphDisplayUpdateSlot(self, imgPath):
        pixmap = QtGui.QPixmap(imgPath)
        self.modelLossGraphDisplay.setPixmap(pixmap)
        self.modelLossGraphDisplay.setScaledContents(True)
        self.modelLossGraphDisplay.setSizePolicy(QtWidgets.QSizePolicy.Policy.Ignored, QtWidgets.QSizePolicy.Policy.Ignored)
    #endregion
    #endregion

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = MainWindow()
    MainWindow.show()

    #Create the stderr handler and point stderr to it
    std_err_handler = StdErrHandler()
    #Connect err_msg signal to message box method in main window
    std_err_handler.err_msg.connect(MainWindow.errorPopup)
    #Redirect stderr to handler
    sys.stderr = std_err_handler

    sys.exit(app.exec())